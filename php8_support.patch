Index: dllmain.cpp
===================================================================
--- dllmain.cpp	(revision 251535)
+++ dllmain.cpp	(working copy)
@@ -28,36 +28,40 @@
 #include "PHPCadesCPSignedXML.h"
 #include "PHPCadesSymmetricAlgorithm.h"
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_gearman_verbose_name, 0, 0, 1)
+	ZEND_ARG_INFO(0, verbose)
+ZEND_END_ARG_INFO()
+
 PHP_MINIT_FUNCTION(php_cpcsp) {
     // le_hash_resource = zend_register_list_destructors_ex(php_hash_res_dtor,
     // php_hash_res_pdtor, PHP_HASH_RESOURCE_NAME, module_number);
-    about_init(TSRMLS_C);
-    version_init(TSRMLS_C);
-    store_init(TSRMLS_C);
-    certs_init(TSRMLS_C);
-    cert_init(TSRMLS_C);
-    ku_init(TSRMLS_C);
-    exku_init(TSRMLS_C);
-    eku_init(TSRMLS_C);
-    algo_init(TSRMLS_C);
-    private_key_init(TSRMLS_C);
-    encoded_data_init(TSRMLS_C);
-    public_key_init(TSRMLS_C);
-    oid_init(TSRMLS_C);
-    attr_init(TSRMLS_C);
-    basic_constr_init(TSRMLS_C);
-    certstat_init(TSRMLS_C);
-    enveloped_data_init(TSRMLS_C);
-    sig_init(TSRMLS_C);
-    eku_col_init(TSRMLS_C);
-    attr_col_init(TSRMLS_C);
-    signers_init(TSRMLS_C);
-    recipients_init(TSRMLS_C);
-    sig_dat_init(TSRMLS_C);
-    hash_dat_init(TSRMLS_C);
-    raw_sig_init(TSRMLS_C);
-    sig_xml_init(TSRMLS_C);
-    symmetric_algorithm_init(TSRMLS_C);
+    about_init();
+    version_init();
+    store_init();
+    certs_init();
+    cert_init();
+    ku_init();
+    exku_init();
+    eku_init();
+    algo_init();
+    private_key_init();
+    encoded_data_init();
+    public_key_init();
+    oid_init();
+    attr_init();
+    basic_constr_init();
+    certstat_init();
+    enveloped_data_init();
+    sig_init();
+    eku_col_init();
+    attr_col_init();
+    signers_init();
+    recipients_init();
+    signed_data_init();
+    hashed_data_init();
+    raw_sig_init();
+    signed_xml_init();
+    symmetric_algorithm_init();
 
     REGISTER_LONG_CONSTANT("MEMORY_STORE", 0, CONST_CS | CONST_PERSISTENT);
     REGISTER_LONG_CONSTANT("LOCAL_MACHINE_STORE", 1,
Index: PHPCadesAbout.cpp
===================================================================
--- PHPCadesAbout.cpp	(revision 251535)
+++ PHPCadesAbout.cpp	(working copy)
@@ -3,12 +3,13 @@
 #include "PHPCadesVersion.h"
 using namespace CryptoPro::PKI::CAdES;
 
-//Полное объявление структуры
+//РџРѕР»РЅРѕРµ РѕР±СЉСЏРІР»РµРЅРёРµ СЃС‚СЂСѓРєС‚СѓСЂС‹
 
-//Методы
+//РњРµС‚РѕРґС‹
 PHP_METHOD(About, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     about_obj *obj =
-        (about_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (about_obj *)((char *)zobj - XtOffsetOf(about_obj, zobj));
     obj->m_pCppCadesImpl =
         boost::shared_ptr<CPPCadesAboutObject>(new CPPCadesAboutObject());
 }
@@ -15,8 +16,9 @@
 
 PHP_METHOD(About, get_MajorVersion) {
     unsigned int version;
+    zend_object *zobj = Z_OBJ_P(getThis());
     about_obj *obj =
-        (about_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (about_obj *)((char *)zobj - XtOffsetOf(about_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_MajorVersion(&version));
 
     RETURN_LONG(version);
@@ -25,8 +27,9 @@
 PHP_METHOD(About, get_MinorVersion) {
     unsigned int version;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     about_obj *obj =
-        (about_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (about_obj *)((char *)zobj - XtOffsetOf(about_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_MinorVersion(&version));
 
     RETURN_LONG(version);
@@ -35,8 +38,9 @@
 PHP_METHOD(About, get_BuildVersion) {
     unsigned int version;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     about_obj *obj =
-        (about_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (about_obj *)((char *)zobj - XtOffsetOf(about_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_BuildVersion(&version));
 
     RETURN_LONG(version);
@@ -45,8 +49,9 @@
 PHP_METHOD(About, get_Version) {
     CAtlString AtlVersion;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     about_obj *obj =
-        (about_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (about_obj *)((char *)zobj - XtOffsetOf(about_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Version(AtlVersion));
 
     RETURN_ATL_STRING(AtlVersion);
@@ -56,13 +61,17 @@
 
     boost::shared_ptr<CPPVersionObject> version;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     about_obj *obj =
-        (about_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (about_obj *)((char *)zobj - XtOffsetOf(about_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_PluginVersion(version));
 
     object_init_ex(return_value, version_ce);
+    
+    zobj = Z_OBJ_P(return_value);
     version_obj *pPluginVersion =
-        (version_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (version_obj *)((char *)zobj - XtOffsetOf(version_obj, zobj));
     pPluginVersion->m_pCppCadesImpl = version;
 }
 
@@ -70,81 +79,94 @@
 
     boost::shared_ptr<CPPVersionObject> version;
     char *szProvName;
-    int szProvName_len = 0;
+    size_t szProvName_len = 0;
     DWORD dwProvType = 75;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|sl", &szProvName,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "|sl", &szProvName,
                               &szProvName_len, &dwProvType) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     CAtlString provName =
         CAtlString(CA2CT(CAtlStringA(szProvName, szProvName_len), CP_UTF8));
+
+    zend_object *zobj = Z_OBJ_P(getThis());
     about_obj *obj =
-        (about_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (about_obj *)((char *)zobj - XtOffsetOf(about_obj, zobj));
+
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_CSPVersion(provName, dwProvType, version));
 
     object_init_ex(return_value, version_ce);
+    zobj = Z_OBJ_P(return_value);
     version_obj *pCSPVersion =
-        (version_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (version_obj *)((char *)zobj - XtOffsetOf(version_obj, zobj));
     pCSPVersion->m_pCppCadesImpl = version;
 }
 
-//Вспомогательные функции обертки
+//Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё РѕР±РµСЂС‚РєРё
 zend_object_handlers about_obj_handlers;
 zend_class_entry *about_ce;
 
-void about_free_storage(void *object TSRMLS_DC) {
-    about_obj *obj = (about_obj *)object;
+static void about_free(zend_object *object ) {
+    about_obj *obj = (about_obj *)((char *)object - XtOffsetOf(about_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* about_create_handler(zend_class_entry *ce ) {
+    about_obj *obj = (about_obj *)emalloc(sizeof(about_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(about_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &about_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value about_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_about_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    about_obj *obj = (about_obj *)emalloc(sizeof(about_obj));
-    memset(obj, 0, sizeof(about_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_about_get_majorversion, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_about_get_minorversion, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, about_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &about_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_about_get_buildversion, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_about_get_version, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+ZEND_BEGIN_ARG_INFO_EX(arginfo_about_cspversion, 0, 0, 0)
+ ZEND_ARG_INFO(0, provname)
+ ZEND_ARG_INFO(0, provtype)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_about_pluginversion, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry about_methods[] = {
-    PHP_ME(About, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(About, get_MajorVersion, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(About, get_MinorVersion, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(About, get_BuildVersion, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(About, get_Version, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(About, CSPVersion, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(About, PluginVersion, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(About, __construct, arginfo_about_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(About, get_MajorVersion, arginfo_about_get_majorversion, ZEND_ACC_PUBLIC)
+    PHP_ME(About, get_MinorVersion, arginfo_about_get_minorversion, ZEND_ACC_PUBLIC)
+    PHP_ME(About, get_BuildVersion, arginfo_about_get_buildversion, ZEND_ACC_PUBLIC)
+    PHP_ME(About, get_Version, arginfo_about_get_version, ZEND_ACC_PUBLIC)
+    PHP_ME(About, CSPVersion, arginfo_about_cspversion, ZEND_ACC_PUBLIC)
+    PHP_ME(About, PluginVersion, arginfo_about_pluginversion, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void about_init(TSRMLS_D) {
+void about_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "About", about_methods);
-    about_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    about_ce = zend_register_internal_class(&ce );
     about_ce->create_object = about_create_handler;
     memcpy(&about_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     about_obj_handlers.clone_obj = NULL;
+    about_obj_handlers.free_obj = about_free;
+    about_obj_handlers.offset = XtOffsetOf(about_obj, zobj);
 }
Index: PHPCadesAbout.h
===================================================================
--- PHPCadesAbout.h	(revision 251535)
+++ PHPCadesAbout.h	(working copy)
@@ -6,11 +6,11 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct about_obj {
-    zend_object zo;
+typedef struct _about_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesAboutObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} about_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers about_obj_handlers;
@@ -18,14 +18,14 @@
 extern zend_class_entry *about_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void about_free_storage(void *object TSRMLS_DC);
+// void about_free_storage(void *object );
 
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value about_create_handler(zend_class_entry *type TSRMLS_DC);
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value about_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void about_init(TSRMLS_D);
+void about_init(void);
 
 #endif
Index: PHPCadesCPAlgorithm.cpp
===================================================================
--- PHPCadesCPAlgorithm.cpp	(revision 251535)
+++ PHPCadesCPAlgorithm.cpp	(working copy)
@@ -2,12 +2,13 @@
 #include "PHPCadesCPAlgorithm.h"
 using namespace CryptoPro::PKI::CAdES;
 
-//Методы
+//РњРµС‚РѕРґС‹
 PHP_METHOD(CPAlgorithm, __construct) {
     CPPCadesCPAlgorithmObject *algo;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     algo_obj *obj =
-        (algo_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (algo_obj *)((char *)zobj - XtOffsetOf(algo_obj, zobj));
     algo = new CPPCadesCPAlgorithmObject();
     obj->m_pCppCadesImpl = algo;
 }
@@ -15,11 +16,12 @@
 PHP_METHOD(CPAlgorithm, get_Name) {
     CADESCOM_ENCRYPTION_ALGORITHM Name;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     algo_obj *obj =
-        (algo_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (algo_obj *)((char *)zobj - XtOffsetOf(algo_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Name(&Name));
 
-    RETURN_LONG(Name)
+    RETURN_LONG(Name);
 }
 
 PHP_METHOD(CPAlgorithm, set_Name) {
@@ -26,14 +28,15 @@
     long lName;
     CADESCOM_ENCRYPTION_ALGORITHM Name;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lName) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lName) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Name = (CADESCOM_ENCRYPTION_ALGORITHM)lName;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     algo_obj *obj =
-        (algo_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (algo_obj *)((char *)zobj - XtOffsetOf(algo_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Name(Name));
 }
 
@@ -40,11 +43,12 @@
 PHP_METHOD(CPAlgorithm, get_KeyLength) {
     CAPICOM_ENCRYPTION_KEY_LENGTH Len;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     algo_obj *obj =
-        (algo_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (algo_obj *)((char *)zobj - XtOffsetOf(algo_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_KeyLength(&Len));
 
-    RETURN_LONG(Len)
+    RETURN_LONG(Len);
 }
 
 PHP_METHOD(CPAlgorithm, set_KeyLength) {
@@ -51,68 +55,72 @@
     long lLen;
     CAPICOM_ENCRYPTION_KEY_LENGTH Len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lLen) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lLen) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
     Len = (CAPICOM_ENCRYPTION_KEY_LENGTH)lLen;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     algo_obj *obj =
-        (algo_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (algo_obj *)((char *)zobj - XtOffsetOf(algo_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_KeyLength(Len));
 }
 
-//Вспомагательные функции обертки
+//Р’СЃРїРѕРјР°РіР°С‚РµР»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё РѕР±РµСЂС‚РєРё
 zend_object_handlers algo_obj_handlers;
 zend_class_entry *algo_ce;
 
-void algo_free_storage(void *object TSRMLS_DC) {
-    algo_obj *obj = (algo_obj *)object;
-    delete obj->m_pCppCadesImpl;
+static void algo_free(zend_object *object ) {
+    algo_obj *obj = (algo_obj *)((char *)object - XtOffsetOf(algo_obj, zobj));
+    delete(obj->m_pCppCadesImpl);
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* algo_create_handler(zend_class_entry *ce ) {
+    algo_obj *obj = (algo_obj *)emalloc(sizeof(algo_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(algo_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &algo_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value algo_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpalgorithm_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    algo_obj *obj = (algo_obj *)emalloc(sizeof(algo_obj));
-    memset(obj, 0, sizeof(algo_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpalgorithm_get_name, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpalgorithm_set_name, 0, 0, 1)
+ ZEND_ARG_INFO(0, name)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, algo_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &algo_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpalgorithm_get_keylength, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpalgorithm_set_keylength, 0, 0, 1)
+ ZEND_ARG_INFO(0, keylength)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry algo_methods[] = {
-    PHP_ME(CPAlgorithm, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPAlgorithm, get_Name, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAlgorithm, set_Name, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAlgorithm, get_KeyLength, NULL, ZEND_ACC_PUBLIC) PHP_ME(
-        CPAlgorithm, set_KeyLength, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPAlgorithm, __construct, arginfo_cpalgorithm_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPAlgorithm, get_Name, arginfo_cpalgorithm_get_name, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAlgorithm, set_Name, arginfo_cpalgorithm_set_name, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAlgorithm, get_KeyLength, arginfo_cpalgorithm_get_keylength, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAlgorithm, set_KeyLength, arginfo_cpalgorithm_set_keylength, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void algo_init(TSRMLS_D) {
+void algo_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPAlgorithm", algo_methods);
-    algo_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    algo_ce = zend_register_internal_class(&ce );
     algo_ce->create_object = algo_create_handler;
     memcpy(&algo_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     algo_obj_handlers.clone_obj = NULL;
+    algo_obj_handlers.free_obj = algo_free;
+    algo_obj_handlers.offset = XtOffsetOf(algo_obj, zobj);
 }
Index: PHPCadesCPAlgorithm.h
===================================================================
--- PHPCadesCPAlgorithm.h	(revision 251535)
+++ PHPCadesCPAlgorithm.h	(working copy)
@@ -5,24 +5,24 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct algo_obj {
-    zend_object zo;
+typedef struct _algo_obj {
     CryptoPro::PKI::CAdES::CPPCadesCPAlgorithmObject *m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} algo_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers algo_obj_handlers;
 extern zend_class_entry *algo_ce;
 
-//функция освобождения памяти. используется при уничтожении объектов
-void algo_free_storage(void *object TSRMLS_DC);
+// //функция освобождения памяти. используется при уничтожении объектов
+// void algo_free_storage(void *object );
 
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value algo_create_handler(zend_class_entry *type TSRMLS_DC);
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value algo_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void algo_init(TSRMLS_D);
+void algo_init(void);
 
 #endif
Index: PHPCadesCPAttribute.cpp
===================================================================
--- PHPCadesCPAttribute.cpp	(revision 251535)
+++ PHPCadesCPAttribute.cpp	(working copy)
@@ -3,10 +3,11 @@
 #include "PHPCadesCPOID.h"
 using namespace CryptoPro::PKI::CAdES;
 
-//Методы
+//РњРµС‚РѕРґС‹
 PHP_METHOD(CPAttribute, __construct) {
-    attr_obj *obj =
-        (attr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attribute_obj *obj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
     boost::shared_ptr<CPPCadesCPAttributeObject> ptr(
         new CPPCadesCPAttributeObject());
     obj->m_pCppCadesImpl = ptr;
@@ -16,22 +17,26 @@
     char *str;
     int len;
 
-    attr_obj *obj =
-        (attr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
-
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
+
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attribute_obj *obj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_OID(CAtlStringA(str)));
 }
 
 PHP_METHOD(CPAttribute, get_OID) {
-    attr_obj *obj =
-        (attr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attribute_obj *obj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
 
     object_init_ex(return_value, oid_ce);
+    zobj = Z_OBJ_P(return_value);
     oid_obj *oobj =
-        (oid_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (oid_obj *)((char *)zobj - XtOffsetOf(oid_obj, zobj));
     oobj->m_pCppCadesImpl =
         boost::shared_ptr<CPPCadesCPOIDObject>(new CPPCadesCPOIDObject());
     boost::shared_ptr<CPPCadesCPOIDObject> ptr(new CPPCadesCPOIDObject());
@@ -44,14 +49,16 @@
     CryptoPro::CBlob val;
     CADESCOM_ATTRIBUTE Name;
     unsigned char *str;
-    unsigned int len;
+    size_t len;
 
-    attr_obj *obj =
-        (attr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
-
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
+
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attribute_obj *obj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
+
     val.assign(str, len);
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Name(&Name));
 
@@ -70,12 +77,12 @@
 PHP_METHOD(CPAttribute, get_Value) {
     CryptoPro::CBlob val;
     BYTE *str;
-    char *tstr;
     DWORD len;
     CADESCOM_ATTRIBUTE Name;
 
-    attr_obj *obj =
-        (attr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attribute_obj *obj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Name(&Name));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Value(val));
@@ -94,22 +101,25 @@
                           &fTimeSize);
         CryptoPro::CDateTime Time(fTime);
         CryptoPro::CStringProxy prstr = Time.tostring();
-        tstr = const_cast<char *>(prstr.c_str());
-        RETURN_STRING(tstr, 1)
+        zend_string *tstr = zend_string_init(const_cast<char *>(prstr.c_str()), strlen(prstr.c_str()), 0);
+        RETURN_NEW_STR(tstr);
     }
-    RETURN_STRINGL(reinterpret_cast<char *>(str), len, 0)
+    RETURN_STRINGL(reinterpret_cast<char *>(str), len);
 }
 
 PHP_METHOD(CPAttribute, set_Name) {
     long lname;
     CADESCOM_ATTRIBUTE name;
-    attr_obj *obj =
-        (attr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lname) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lname) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attribute_obj *obj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
+
+
     name = (CADESCOM_ATTRIBUTE)lname;
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Name(name));
@@ -117,25 +127,26 @@
 
 PHP_METHOD(CPAttribute, get_Name) {
     CADESCOM_ATTRIBUTE name;
-    attr_obj *obj =
-        (attr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attribute_obj *obj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Name(&name));
 
-    RETURN_LONG(name)
+    RETURN_LONG(name);
 }
 
 PHP_METHOD(CPAttribute, set_ValueEncoding) {
     long lType;
     CAPICOM_ENCODING_TYPE Type;
-    attr_obj *obj =
-        (attr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
-
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lType) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lType) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Type = (CAPICOM_ENCODING_TYPE)lType;
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attribute_obj *obj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_ValueEncoding(Type));
 }
@@ -142,72 +153,89 @@
 
 PHP_METHOD(CPAttribute, get_ValueEncoding) {
     CAPICOM_ENCODING_TYPE type;
-    attr_obj *obj =
-        (attr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attribute_obj *obj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_ValueEncoding(&type));
 
-    RETURN_LONG(type)
+    RETURN_LONG(type);
 }
 
-//Вспомогательные функции обертки
-zend_object_handlers attr_obj_handlers;
-zend_class_entry *attr_ce;
+//Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё РѕР±РµСЂС‚РєРё
+zend_object_handlers attribute_obj_handlers;
+zend_class_entry *attribute_ce;
 
-void attr_free_storage(void *object TSRMLS_DC) {
-    attr_obj *obj = (attr_obj *)object;
+static void attribute_free(zend_object *object) {
+    attribute_obj *obj = (attribute_obj *)((char *)object - XtOffsetOf(attribute_obj, zobj));;
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* attribute_create_handler(zend_class_entry *ce ) {
+    attribute_obj *obj = (attribute_obj *)emalloc(sizeof(attribute_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(attribute_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &attribute_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value attr_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    attr_obj *obj = (attr_obj *)emalloc(sizeof(attr_obj));
-    memset(obj, 0, sizeof(attr_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_set_oid, 0, 0, 1)
+ ZEND_ARG_INFO(0, oid)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_get_oid, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, attr_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &attr_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_set_value, 0, 0, 1)
+ ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_get_value, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_set_name, 0, 0, 1)
+ ZEND_ARG_INFO(0, name)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_get_name, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_set_valueencoding, 0, 0, 1)
+ ZEND_ARG_INFO(0, valueencoding)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_get_valueencoding, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry attr_methods[] = {
-    PHP_ME(CPAttribute, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPAttribute, set_OID, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttribute, get_OID, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttribute, set_Value, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttribute, get_Value, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttribute, set_Name, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttribute, get_Name, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttribute, set_ValueEncoding, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttribute, get_ValueEncoding, NULL, ZEND_ACC_PUBLIC){NULL, NULL,
-                                                                  NULL}};
+    PHP_ME(CPAttribute, __construct, arginfo_cpattribute_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPAttribute, set_OID, arginfo_cpattribute_set_oid, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttribute, get_OID, arginfo_cpattribute_get_oid, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttribute, set_Value, arginfo_cpattribute_set_value, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttribute, get_Value, arginfo_cpattribute_get_value, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttribute, set_Name, arginfo_cpattribute_set_name, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttribute, get_Name, arginfo_cpattribute_get_name, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttribute, set_ValueEncoding, arginfo_cpattribute_set_valueencoding, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttribute, get_ValueEncoding, arginfo_cpattribute_get_valueencoding, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void attr_init(TSRMLS_D) {
+void attr_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPAttribute", attr_methods);
-    attr_ce = zend_register_internal_class(&ce TSRMLS_CC);
-    attr_ce->create_object = attr_create_handler;
-    memcpy(&attr_obj_handlers, zend_get_std_object_handlers(),
+    attribute_ce = zend_register_internal_class(&ce );
+    attribute_ce->create_object = attribute_create_handler;
+    memcpy(&attribute_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    attr_obj_handlers.clone_obj = NULL;
+    attribute_obj_handlers.clone_obj = NULL;
+    attribute_obj_handlers.free_obj = attribute_free;
+    attribute_obj_handlers.offset = XtOffsetOf(attribute_obj, zobj);
 }
Index: PHPCadesCPAttribute.h
===================================================================
--- PHPCadesCPAttribute.h	(revision 251535)
+++ PHPCadesCPAttribute.h	(working copy)
@@ -5,19 +5,19 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct attr_obj {
-    zend_object zo;
+typedef struct _attribute_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPAttributeObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} attribute_obj;
 
-extern zend_object_handlers attr_obj_handlers;
-extern zend_class_entry *attr_ce;
+extern zend_object_handlers attribute_obj_handlers;
+extern zend_class_entry *attribute_ce;
 
-void attr_free_storage(void *object TSRMLS_DC);
-zend_object_value attr_create_handler(zend_class_entry *type TSRMLS_DC);
+// // void attr_free_storage(void *object );
+// zend_object_value attr_create_handler(zend_class_entry *type );
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void attr_init(TSRMLS_D);
+void attr_init(void);
 
 #endif
Index: PHPCadesCPAttributes.cpp
===================================================================
--- PHPCadesCPAttributes.cpp	(revision 251535)
+++ PHPCadesCPAttributes.cpp	(working copy)
@@ -3,10 +3,11 @@
 #include "PHPCadesCPAttribute.h"
 using namespace CryptoPro::PKI::CAdES;
 
-//Методы
+//РњРµС‚РѕРґС‹
 PHP_METHOD(CPAttributes, __construct) {
-    attr_col *obj =
-        (attr_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attributes_col_obj *obj =
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
     boost::shared_ptr<CPPCadesCPAttributesObject> ptr(
         new CPPCadesCPAttributesObject());
     obj->m_pCppCadesImpl = ptr;
@@ -14,37 +15,43 @@
 
 PHP_METHOD(CPAttributes, Add) {
     zval *item;
-    attr_col *obj =
-        (attr_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "O", &item,
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attributes_col_obj *obj =
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "O", &item,
                               obj->type) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    attr_obj *iobj = (attr_obj *)zend_object_store_get_object(item TSRMLS_CC);
+    zobj = Z_OBJ_P(item);
+    attribute_obj *iobj = 
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Add(iobj->m_pCppCadesImpl));
 }
 
 PHP_METHOD(CPAttributes, get_Count) {
     long count;
-    attr_col *obj =
-        (attr_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attributes_col_obj *obj =
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Count(&count));
 
-    RETURN_LONG(count)
+    RETURN_LONG(count);
 }
 
 PHP_METHOD(CPAttributes, get_Item) {
     long idx;
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &idx) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &idx) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    attr_col *obj =
-        (attr_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attributes_col_obj *obj =
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
 
-    object_init_ex(return_value, attr_ce);
-    attr_obj *aobj =
-        (attr_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+    object_init_ex(return_value, attribute_ce);
+    zobj = Z_OBJ_P(return_value);
+    attribute_obj *aobj =
+        (attribute_obj *)((char *)zobj - XtOffsetOf(attribute_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_Item(idx, aobj->m_pCppCadesImpl));
@@ -51,8 +58,9 @@
 }
 
 PHP_METHOD(CPAttributes, Clear) {
-    attr_col *obj =
-        (attr_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attributes_col_obj *obj =
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Clear());
 }
 
@@ -59,82 +67,98 @@
 PHP_METHOD(CPAttributes, Remove) {
     long idx;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &idx) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &idx) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    attr_col *obj =
-        (attr_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attributes_col_obj *obj =
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Remove(idx));
 }
 
 PHP_METHOD(CPAttributes, Assign) {
     zval *attrs;
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "O", &attrs,
-                              attr_col_ce) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "O", &attrs,
+                              attributes_col_ce) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    attr_col *obj =
-        (attr_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
-    attr_col *aobj = (attr_col *)zend_object_store_get_object(attrs TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    attributes_col_obj *obj =
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
+
+    zobj = Z_OBJ_P(attrs);
+    attributes_col_obj *aobj = 
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Assign(
         aobj->m_pCppCadesImpl->get_CryptAttributesStruct()));
 }
 
-//Вспомогательные функции обертки
-zend_class_entry *attr_col_ce;
-zend_object_handlers attr_col_handlers;
+//Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё РѕР±РµСЂС‚РєРё
+zend_class_entry *attributes_col_ce;
+zend_object_handlers attributes_col_obj_handlers;
 
-void attr_col_free_storage(void *object TSRMLS_DC) {
-    attr_col *obj = (attr_col *)object;
+static void attributes_col_obj_free(zend_object *object ) {
+    attributes_col_obj *obj = (attributes_col_obj *)((char *)object - XtOffsetOf(attributes_col_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* attributes_col_obj_create_handler(zend_class_entry *ce ) {
+    attributes_col_obj *obj = (attributes_col_obj *)emalloc(sizeof(attributes_col_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(attributes_col_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &attributes_col_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value attr_col_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattributes_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    attr_col *obj = (attr_col *)emalloc(sizeof(attr_col));
-    memset(obj, 0, sizeof(attr_col));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_add, 0, 0, 1)
+ ZEND_ARG_INFO(0, item)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattributes_get_count, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle = zend_objects_store_put(obj, NULL, attr_col_free_storage,
-                                           NULL TSRMLS_CC);
-    retval.handlers = &attr_col_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattributes_get_item, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattributes_clear, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
-zend_function_entry attr_col_methods[] = {
-    PHP_ME(CPAttributes, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPAttributes, Add, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttributes, get_Count, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttributes, get_Item, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttributes, Clear, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttributes, Remove, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPAttributes, Assign, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_remove, 0, 0, 1)
+ ZEND_ARG_INFO(0, index)
+ZEND_END_ARG_INFO()
 
-void attr_col_init(TSRMLS_D) {
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpattribute_assign, 0, 0, 1)
+ ZEND_ARG_INFO(0, object)
+ZEND_END_ARG_INFO()
+
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
+zend_function_entry attributes_col_obj_methods[] = {
+    PHP_ME(CPAttributes, __construct, arginfo_cpattributes_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPAttributes, Add, arginfo_cpattribute_add, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttributes, get_Count, arginfo_cpattributes_get_count, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttributes, get_Item, arginfo_cpattributes_get_item, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttributes, Clear, arginfo_cpattributes_clear, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttributes, Remove, arginfo_cpattribute_remove, ZEND_ACC_PUBLIC)
+    PHP_ME(CPAttributes, Assign, arginfo_cpattribute_assign, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
+
+void attr_col_init(void) {
     zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce, "CPAttributes", attr_col_methods);
-    attr_col_ce = zend_register_internal_class(&ce TSRMLS_CC);
-    attr_col_ce->create_object = attr_col_create_handler;
-    memcpy(&attr_col_handlers, zend_get_std_object_handlers(),
+    INIT_CLASS_ENTRY(ce, "CPAttributes", attributes_col_obj_methods);
+    attributes_col_ce = zend_register_internal_class(&ce );
+    attributes_col_ce->create_object = attributes_col_obj_create_handler;
+    memcpy(&attributes_col_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    attr_col_handlers.clone_obj = NULL;
+    attributes_col_obj_handlers.clone_obj = NULL;
+    attributes_col_obj_handlers.free_obj = attributes_col_obj_free;
+    attributes_col_obj_handlers.offset = XtOffsetOf(attributes_col_obj, zobj);
 }
Index: PHPCadesCPAttributes.h
===================================================================
--- PHPCadesCPAttributes.h	(revision 251535)
+++ PHPCadesCPAttributes.h	(working copy)
@@ -5,20 +5,20 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct attr_col {
-    zend_object zo;
+typedef struct _attributes_col_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPAttributesObject> m_pCppCadesImpl;
     zend_class_entry *type;
-};
+    zend_object zobj; /* MUST be the last element */
+} attributes_col_obj;
 
-extern zend_class_entry *attr_col_ce;
-extern zend_object_handlers attr_col_handlers;
+extern zend_class_entry *attributes_col_ce;
+extern zend_object_handlers attributes_col_obj_handlers;
 
-void attr_col_free_storage(void *object TSRMLS_DC);
-zend_object_value attr_col_create_handler(zend_class_entry *type TSRMLS_DC);
+// void attr_col_free_storage(void *object );
+// zend_object_value attr_col_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void attr_col_init(TSRMLS_D);
+void attr_col_init(void);
 
 #endif
Index: PHPCadesCPBasicConstraints.cpp
===================================================================
--- PHPCadesCPBasicConstraints.cpp	(revision 251535)
+++ PHPCadesCPBasicConstraints.cpp	(working copy)
@@ -3,8 +3,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPBasicConstraints, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     basic_constr_obj *obj =
-        (basic_constr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (basic_constr_obj *)((char *)zobj - XtOffsetOf(basic_constr_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesCPBasicConstraintsObject>(
         new CPPCadesCPBasicConstraintsObject());
 }
@@ -12,10 +13,11 @@
 PHP_METHOD(CPBasicConstraints, set_IsPresent) {
     long lpr;
     BOOL pr;
+    zend_object *zobj = Z_OBJ_P(getThis());
     basic_constr_obj *obj =
-        (basic_constr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (basic_constr_obj *)((char *)zobj - XtOffsetOf(basic_constr_obj, zobj));
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lpr) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lpr) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     pr = (BOOL)lpr;
@@ -25,21 +27,23 @@
 
 PHP_METHOD(CPBasicConstraints, get_IsPresent) {
     BOOL pr;
+    zend_object *zobj = Z_OBJ_P(getThis());
     basic_constr_obj *obj =
-        (basic_constr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (basic_constr_obj *)((char *)zobj - XtOffsetOf(basic_constr_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsPresent(&pr));
 
-    RETURN_LONG(pr)
+    RETURN_LONG(pr);
 }
 
 PHP_METHOD(CPBasicConstraints, set_IsCritical) {
     long lcr;
     BOOL cr;
+    zend_object *zobj = Z_OBJ_P(getThis());
     basic_constr_obj *obj =
-        (basic_constr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (basic_constr_obj *)((char *)zobj - XtOffsetOf(basic_constr_obj, zobj));
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lcr) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lcr) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     cr = (BOOL)lcr;
@@ -49,105 +53,117 @@
 
 PHP_METHOD(CPBasicConstraints, get_IsCritical) {
     BOOL cr;
+    zend_object *zobj = Z_OBJ_P(getThis());
     basic_constr_obj *obj =
-        (basic_constr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (basic_constr_obj *)((char *)zobj - XtOffsetOf(basic_constr_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsCritical(&cr));
 
-    RETURN_LONG(cr)
+    RETURN_LONG(cr);
 }
 
 PHP_METHOD(CPBasicConstraints, get_IsCertificateAuthority) {
     BOOL ca;
+    zend_object *zobj = Z_OBJ_P(getThis());
     basic_constr_obj *obj =
-        (basic_constr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (basic_constr_obj *)((char *)zobj - XtOffsetOf(basic_constr_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsCertificateAuthority(&ca));
 
-    RETURN_LONG(ca)
+    RETURN_LONG(ca);
 }
 
 PHP_METHOD(CPBasicConstraints, get_IsPathLenConstraintPresent) {
     BOOL plcp;
+    zend_object *zobj = Z_OBJ_P(getThis());
     basic_constr_obj *obj =
-        (basic_constr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (basic_constr_obj *)((char *)zobj - XtOffsetOf(basic_constr_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_IsPathLenConstraintPresent(&plcp));
 
-    RETURN_LONG(plcp)
+    RETURN_LONG(plcp);
 }
 
 PHP_METHOD(CPBasicConstraints, get_PathLenConstraint) {
     DWORD plc;
+    zend_object *zobj = Z_OBJ_P(getThis());
     basic_constr_obj *obj =
-        (basic_constr_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (basic_constr_obj *)((char *)zobj - XtOffsetOf(basic_constr_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_PathLenConstraint(&plc));
 
-    RETURN_LONG(plc)
+    RETURN_LONG(plc);
 }
 
-//Вспомогательные функции обертки
+//Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё РѕР±РµСЂС‚РєРё
 zend_object_handlers basic_constr_obj_handlers;
 zend_class_entry *basic_constr_ce;
 
-void basic_constr_free_storage(void *object TSRMLS_DC) {
-    basic_constr_obj *obj = (basic_constr_obj *)object;
+static void basic_constr_free(zend_object *object) {
+    basic_constr_obj *obj = (basic_constr_obj *)((char *)object - XtOffsetOf(basic_constr_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* basic_constr_create_handler(zend_class_entry *ce) {
+    basic_constr_obj *obj = (basic_constr_obj *)emalloc(sizeof(basic_constr_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(basic_constr_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &basic_constr_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value basic_constr_create_handler(zend_class_entry *type
-                                                  TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpbasicconstraints_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    basic_constr_obj *obj =
-        (basic_constr_obj *)emalloc(sizeof(basic_constr_obj));
-    memset(obj, 0, sizeof(basic_constr_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpbasicconstraints_set_ispresent, 0, 0, 1)
+ ZEND_ARG_INFO(0, ispresent)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpbasicconstraints_get_ispresent, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle = zend_objects_store_put(obj, NULL, basic_constr_free_storage,
-                                           NULL TSRMLS_CC);
-    retval.handlers = &basic_constr_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpbasicconstraints_set_iscritical, 0, 0, 1)
+ ZEND_ARG_INFO(0, iscritical)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpbasicconstraints_get_iscritical, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpbasicconstraints_get_iscertificateauthority, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpbasicconstraints_get_ispathlenconstraintpresent, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpbasicconstraints_get_pathlenconstraint, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry basic_constr_methods[] = {
-    PHP_ME(CPBasicConstraints, __construct, NULL,
-           ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPBasicConstraints, set_IsPresent, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPBasicConstraints, get_IsPresent, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPBasicConstraints, set_IsCritical, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPBasicConstraints, get_IsCritical, NULL, ZEND_ACC_PUBLIC) PHP_ME(
-        CPBasicConstraints, get_IsCertificateAuthority, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPBasicConstraints, get_IsPathLenConstraintPresent, NULL,
-           ZEND_ACC_PUBLIC) PHP_ME(CPBasicConstraints, get_PathLenConstraint,
-                                   NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPBasicConstraints, __construct, arginfo_cpbasicconstraints_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPBasicConstraints, set_IsPresent, arginfo_cpbasicconstraints_set_ispresent, ZEND_ACC_PUBLIC)
+    PHP_ME(CPBasicConstraints, get_IsPresent, arginfo_cpbasicconstraints_get_ispresent, ZEND_ACC_PUBLIC)
+    PHP_ME(CPBasicConstraints, set_IsCritical, arginfo_cpbasicconstraints_set_iscritical, ZEND_ACC_PUBLIC)
+    PHP_ME(CPBasicConstraints, get_IsCritical, arginfo_cpbasicconstraints_get_iscritical, ZEND_ACC_PUBLIC) 
+    PHP_ME(CPBasicConstraints, get_IsCertificateAuthority, arginfo_cpbasicconstraints_get_iscertificateauthority, ZEND_ACC_PUBLIC)
+    PHP_ME(CPBasicConstraints, get_IsPathLenConstraintPresent, arginfo_cpbasicconstraints_get_ispathlenconstraintpresent, ZEND_ACC_PUBLIC) 
+    PHP_ME(CPBasicConstraints, get_PathLenConstraint, arginfo_cpbasicconstraints_get_pathlenconstraint, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void basic_constr_init(TSRMLS_D) {
+void basic_constr_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPBasicConstraints", basic_constr_methods);
-    basic_constr_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    basic_constr_ce = zend_register_internal_class(&ce );
     basic_constr_ce->create_object = basic_constr_create_handler;
     memcpy(&basic_constr_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     basic_constr_obj_handlers.clone_obj = NULL;
+    basic_constr_obj_handlers.free_obj = basic_constr_free;
+    basic_constr_obj_handlers.offset = XtOffsetOf(basic_constr_obj, zobj);
 }
Index: PHPCadesCPBasicConstraints.h
===================================================================
--- PHPCadesCPBasicConstraints.h	(revision 251535)
+++ PHPCadesCPBasicConstraints.h	(working copy)
@@ -5,11 +5,11 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct basic_constr_obj {
-    zend_object zo;
+typedef struct _basic_constr_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPBasicConstraintsObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} basic_constr_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers basic_constr_obj_handlers;
@@ -16,12 +16,12 @@
 extern zend_class_entry *basic_constr_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void basic_constr_free_storage(void *object TSRMLS_DC);
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value basic_constr_create_handler(zend_class_entry *type TSRMLS_DC);
+// void basic_constr_free_storage(void *object );
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value basic_constr_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void basic_constr_init(TSRMLS_D);
+void basic_constr_init(void);
 #endif
Index: PHPCadesCPCardholderData.cpp
===================================================================
--- PHPCadesCPCardholderData.cpp	(revision 251535)
+++ PHPCadesCPCardholderData.cpp	(working copy)
@@ -4,7 +4,9 @@
 
 PHP_METHOD(CPCardholderData, __construct) {
     CPPCadesCardholderDataObject *chd;
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     chd = new CPPCadesCardholderDataObject();
     obj->m_pCppCadesImpl = chd;
 }
@@ -12,161 +14,205 @@
 PHP_METHOD(CPCardholderData, get_SocialAccountNumber) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_SocialAccountNumber(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_OMSNumber) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_OMSNumber(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_Name) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Name(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_FirstName) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_FirstName(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_LastName) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_LastName(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_SecondName) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_SecondName(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_CardIssuerAddress) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_CardIssuerAddress(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_DateOfBirth) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_DateOfBirth(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_PlaceOfBirth) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_PlaceOfBirth(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_SexString) {
     CAtlString atlstr;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_SexString(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPCardholderData, get_Sex) {
     CADESCOM_HUMAN_SEXES sex;
 
-    chd_obj *obj = (chd_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    chd_obj *obj =
+        (chd_obj *)((char *)zobj - XtOffsetOf(chd_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Sex(&sex));
 
-    RETURN_LONG(sex)
+    RETURN_LONG(sex);
 }
 
 zend_object_handlers chd_obj_handlers;
 zend_class_entry *chd_ce;
 
-void chd_free_storage(void *object TSRMLS_DC) {
-    chd_obj *obj = (chd_obj *)object;
-    delete obj->m_pCppCadesImpl;
+static void chd_free(zend_object *object ) {
+    chd_obj *obj = (chd_obj *)((char *)object - XtOffsetOf(chd_obj, zobj));
+    delete(obj->m_pCppCadesImpl);
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* chd_create_handler(zend_class_entry *ce ) {
+    chd_obj *obj = (chd_obj *)emalloc(sizeof(chd_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(chd_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &chd_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value chd_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    chd_obj *obj = (chd_obj *)emalloc(sizeof(chd_obj));
-    memset(obj, 0, sizeof(chd_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_socialaccountnumber, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_omsnumber, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, chd_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &chd_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_name, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_firstname, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_lastname, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_secondname, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_cardissueraddress, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_dateofbirth, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_placeofbirth, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_sexstring, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcardholderdata_get_sex, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
 //связывание методов класса в function entry
 zend_function_entry chd_methods[] = {
-    PHP_ME(CPCardholderData, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPCardholderData, get_SocialAccountNumber, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_OMSNumber, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_Name, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_FirstName, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_LastName, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_SecondName, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_CardIssuerAddress, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_DateOfBirth, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_PlaceOfBirth, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_SexString, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCardholderData, get_Sex, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPCardholderData, __construct, arginfo_cpcardholderdata_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPCardholderData, get_SocialAccountNumber, arginfo_cpcardholderdata_get_socialaccountnumber, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_OMSNumber, arginfo_cpcardholderdata_get_omsnumber, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_Name, arginfo_cpcardholderdata_get_name, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_FirstName, arginfo_cpcardholderdata_get_firstname, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_LastName, arginfo_cpcardholderdata_get_lastname, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_SecondName, arginfo_cpcardholderdata_get_secondname, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_CardIssuerAddress, arginfo_cpcardholderdata_get_cardissueraddress, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_DateOfBirth, arginfo_cpcardholderdata_get_dateofbirth, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_PlaceOfBirth, arginfo_cpcardholderdata_get_placeofbirth, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_SexString, arginfo_cpcardholderdata_get_sexstring, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCardholderData, get_Sex, arginfo_cpcardholderdata_get_sex, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void chd_init(TSRMLS_D) {
+void chd_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPCardholderData", chd_methods);
-    chd_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    chd_ce = zend_register_internal_class(&ce );
     chd_ce->create_object = chd_create_handler;
     memcpy(&chd_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     chd_obj_handlers.clone_obj = NULL;
+    chd_obj_handlers.free_obj = chd_free;
+    chd_obj_handlers.offset = XtOffsetOf(chd_obj, zobj);
 }
Index: PHPCadesCPCardholderData.h
===================================================================
--- PHPCadesCPCardholderData.h	(revision 251535)
+++ PHPCadesCPCardholderData.h	(working copy)
@@ -5,10 +5,10 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct chd_obj {
-    zend_object zo;
+typedef struct _chd_obj {
     CryptoPro::PKI::CAdES::CPPCadesCardholderDataObject *m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} chd_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers chd_obj_handlers;
@@ -15,12 +15,12 @@
 extern zend_class_entry *chd_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void chd_free_storage(void *object TSRMLS_DC);
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value chd_create_handler(zend_class_entry *type TSRMLS_DC);
+// void chd_free_storage(void *object );
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value chd_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void chd_init(TSRMLS_D);
+void chd_init(void);
 #endif
Index: PHPCadesCPCertificate.cpp
===================================================================
--- PHPCadesCPCertificate.cpp	(revision 251535)
+++ PHPCadesCPCertificate.cpp	(working copy)
@@ -9,10 +9,11 @@
 #include "PHPCadesCPCertificateStatus.h"
 using namespace CryptoPro::PKI::CAdES;
 
-//Методы
+//РњРµС‚РѕРґС‹
 PHP_METHOD(CPCertificate, __construct) {
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
     boost::shared_ptr<CPPCadesCPCertificateObject> cert(
         new CPPCadesCPCertificateObject());
     obj->m_pCppCadesImpl = cert;
@@ -23,14 +24,15 @@
     long lType;
     CAPICOM_CERT_INFO_TYPE Type;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lType) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lType) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Type = (CAPICOM_CERT_INFO_TYPE)lType;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->GetInfo(Type, infoW));
 
     RETURN_ATL_STRING(infoW);
@@ -37,16 +39,17 @@
 }
 
 PHP_METHOD(CPCertificate, FindPrivateKey) {
-    int len;
+    size_t len;
     char *str;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "|s", &str, &len) ==
         FAILURE) {
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
     }
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->FindPrivateKey(CAtlString(str, len)));
 }
@@ -54,14 +57,15 @@
 PHP_METHOD(CPCertificate, HasPrivateKey) {
     BOOL has;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->HasPrivateKey(&has));
     if (has)
-        RETURN_TRUE
+        RETURN_TRUE;
     else
-        RETURN_FALSE
+        RETURN_FALSE;
 }
 
 PHP_METHOD(CPCertificate, IsValid) {
@@ -68,35 +72,41 @@
     boost::shared_ptr<CPPCadesCPCertificateStatusObject> stat(
         new CPPCadesCPCertificateStatusObject());
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->IsValid(stat));
 
     object_init_ex(return_value, certstat_ce);
+    zobj = Z_OBJ_P(return_value);
     certstat_obj *cstat =
-        (certstat_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
     cstat->m_pCppCadesImpl = stat;
 }
 
 PHP_METHOD(CPCertificate, KeyUsage) {
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     object_init_ex(return_value, ku_ce);
+    zobj = Z_OBJ_P(return_value);
     ku_obj *kobj =
-        (ku_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->KeyUsage(kobj->m_pCppCadesImpl));
 }
 
 PHP_METHOD(CPCertificate, ExtendedKeyUsage) {
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     object_init_ex(return_value, exku_ce);
+    zobj = Z_OBJ_P(return_value);
     exku_obj *exkobj =
-        (exku_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (exku_obj *)((char *)zobj - XtOffsetOf(exku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->ExtendedKeyUsage(exkobj->m_pCppCadesImpl));
@@ -109,7 +119,7 @@
     long lType;
     CAPICOM_ENCODING_TYPE Type;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lType) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lType) ==
         FAILURE) {
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
     }
@@ -116,8 +126,9 @@
 
     Type = (CAPICOM_ENCODING_TYPE)lType;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Export(Type, value));
 
@@ -125,15 +136,15 @@
     str = (char *)ecalloc(len, sizeof(char));
     memcpy(str, value.pbData(), len);
 
-    RETURN_STRINGL(str, len - 2 , 0); //удаляем перевод строки иначе php будет мусор оставлять в переменных
+    RETURN_STRINGL(str, len - 2); //СѓРґР°Р»СЏРµРј РїРµСЂРµРІРѕРґ СЃС‚СЂРѕРєРё РёРЅР°С‡Рµ php Р±СѓРґРµС‚ РјСѓСЃРѕСЂ РѕСЃС‚Р°РІР»СЏС‚СЊ РІ РїРµСЂРµРјРµРЅРЅС‹С…
 }
 
 PHP_METHOD(CPCertificate, Import) {
     CryptoPro::CBlob value;
-    int len;
+    size_t len;
     char *str;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE) {
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
     }
@@ -140,8 +151,9 @@
 
     value.assign((unsigned char *)str, len);
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Import(value));
 }
@@ -149,51 +161,56 @@
 PHP_METHOD(CPCertificate, get_SerialNumber) {
     CAtlString numberW;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_SerialNumber(numberW));
-    RETURN_ATL_STRING(numberW)
+    RETURN_ATL_STRING(numberW);
 }
 
 PHP_METHOD(CPCertificate, get_Thumbprint) {
     CAtlString thumbprW;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Thumbprint(thumbprW));
-    RETURN_ATL_STRING(thumbprW)
+    RETURN_ATL_STRING(thumbprW);
 }
 
 PHP_METHOD(CPCertificate, get_SubjectName) {
     CAtlString nameW;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_SubjectName(nameW));
-    RETURN_ATL_STRING(nameW)
+    RETURN_ATL_STRING(nameW);
 }
 
 PHP_METHOD(CPCertificate, get_IssuerName) {
     CAtlString nameW;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IssuerName(nameW));
-    RETURN_ATL_STRING(nameW)
+    RETURN_ATL_STRING(nameW);
 }
 
 PHP_METHOD(CPCertificate, get_Version) {
     DWORD version;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Version(&version));
-    RETURN_LONG(version)
+    RETURN_LONG(version);
 }
 
 PHP_METHOD(CPCertificate, get_ValidToDate) {
@@ -200,12 +217,13 @@
     CryptoPro::CDateTime date;
     CryptoPro::CStringProxy strpr;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_ValidToDate(date));
     strpr = date.tostring();
-    RETURN_PROXY_STRING(strpr)
+    RETURN_PROXY_STRING(strpr);
 }
 
 PHP_METHOD(CPCertificate, get_ValidFromDate) {
@@ -212,21 +230,24 @@
     CryptoPro::CDateTime date;
     CryptoPro::CStringProxy strpr;
 
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_ValidFromDate(date));
     strpr = date.tostring();
-    RETURN_PROXY_STRING(strpr)
+    RETURN_PROXY_STRING(strpr);
 }
 
 PHP_METHOD(CPCertificate, PrivateKey) {
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     object_init_ex(return_value, private_key_ce);
+    zobj = Z_OBJ_P(return_value);
     private_key_obj *kobj =
-        (private_key_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (private_key_obj *)((char *)zobj - XtOffsetOf(private_key_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->PrivateKey(kobj->m_pCppCadesImpl));
@@ -233,12 +254,14 @@
 }
 
 PHP_METHOD(CPCertificate, PublicKey) {
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     object_init_ex(return_value, public_key_ce);
+    zobj = Z_OBJ_P(return_value);
     public_key_obj *kobj =
-        (public_key_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (public_key_obj *)((char *)zobj - XtOffsetOf(public_key_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->PublicKey(kobj->m_pCppCadesImpl));
@@ -245,84 +268,132 @@
 }
 
 PHP_METHOD(CPCertificate, BasicConstraints) {
-    cert_obj *obj =
-        (cert_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    certificate_obj *obj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     object_init_ex(return_value, basic_constr_ce);
-    basic_constr_obj *bcobj = (basic_constr_obj *)zend_object_store_get_object(
-        return_value TSRMLS_CC);
+    zobj = Z_OBJ_P(return_value);
+    basic_constr_obj *bcobj = (basic_constr_obj *)((char *)zobj - XtOffsetOf(basic_constr_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->BasicConstraints(bcobj->m_pCppCadesImpl));
 }
 
-//Вспомогательные функции обертки
-zend_object_handlers cert_obj_handlers;
+//Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё РѕР±РµСЂС‚РєРё
+zend_object_handlers certificate_obj_handlers;
 zend_class_entry *cert_ce;
 
-void cert_free_storage(void *object TSRMLS_DC) {
-    cert_obj *obj = (cert_obj *)object;
+static void cert_free(zend_object *object ) {
+    certificate_obj *obj = (certificate_obj *)((char *)object - XtOffsetOf(certificate_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* cert_create_handler(zend_class_entry *ce ) {
+    certificate_obj *obj = (certificate_obj *)emalloc(sizeof(certificate_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(certificate_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &certificate_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value cert_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    cert_obj *obj = (cert_obj *)emalloc(sizeof(cert_obj));
-    memset(obj, 0, sizeof(cert_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_getinfo, 0, 0, 1)
+ ZEND_ARG_INFO(0, type)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_findprivatekey, 0, 0, 0)
+ ZEND_ARG_INFO(0, criteria_reserved)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, cert_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &cert_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_hasprivatekey, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_isvalid, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_extendedkeyusage, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_keyusage, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_export, 0, 0, 1)
+ ZEND_ARG_INFO(0, encodingtype)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_import, 0, 0, 1)
+ ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_serialnumber, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_thumbprint, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_subjectname, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_issuername, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_version, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_validtodate, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_validfromdate, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_basicconstraints, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_publickey, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificate_get_privatekey, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry cert_methods[] = {
-    PHP_ME(CPCertificate, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPCertificate, GetInfo, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, FindPrivateKey, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, HasPrivateKey, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, IsValid, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, ExtendedKeyUsage, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, KeyUsage, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, Export, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, Import, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, get_SerialNumber, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, get_Thumbprint, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, get_SubjectName, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, get_IssuerName, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, get_Version, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, get_ValidToDate, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, get_ValidFromDate, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, BasicConstraints, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, PublicKey, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificate, PrivateKey, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPCertificate, __construct, arginfo_cpcertificate_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPCertificate, GetInfo, arginfo_cpcertificate_getinfo, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, FindPrivateKey, arginfo_cpcertificate_findprivatekey, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, HasPrivateKey, arginfo_cpcertificate_hasprivatekey, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, IsValid, arginfo_cpcertificate_isvalid, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, ExtendedKeyUsage, arginfo_cpcertificate_extendedkeyusage, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, KeyUsage, arginfo_cpcertificate_keyusage, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, Export, arginfo_cpcertificate_export, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, Import, arginfo_cpcertificate_import, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, get_SerialNumber, arginfo_cpcertificate_get_serialnumber, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, get_Thumbprint, arginfo_cpcertificate_get_thumbprint, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, get_SubjectName, arginfo_cpcertificate_get_subjectname, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, get_IssuerName, arginfo_cpcertificate_get_issuername, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, get_Version, arginfo_cpcertificate_get_version, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, get_ValidToDate, arginfo_cpcertificate_get_validtodate, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, get_ValidFromDate, arginfo_cpcertificate_get_validfromdate, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, BasicConstraints, arginfo_cpcertificate_get_basicconstraints, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, PublicKey, arginfo_cpcertificate_get_publickey, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificate, PrivateKey, arginfo_cpcertificate_get_privatekey, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void cert_init(TSRMLS_D) {
+void cert_init(void) {
     zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce, "CPcertificate", cert_methods);
-    cert_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    INIT_CLASS_ENTRY(ce, "CPCertificate", cert_methods);
+    cert_ce = zend_register_internal_class(&ce );
     cert_ce->create_object = cert_create_handler;
-    memcpy(&cert_obj_handlers, zend_get_std_object_handlers(),
+    memcpy(&certificate_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    cert_obj_handlers.clone_obj = NULL;
+    certificate_obj_handlers.clone_obj = NULL;
+    certificate_obj_handlers.free_obj = cert_free;
+    certificate_obj_handlers.offset = XtOffsetOf(certificate_obj, zobj);
 }
Index: PHPCadesCPCertificate.h
===================================================================
--- PHPCadesCPCertificate.h	(revision 251535)
+++ PHPCadesCPCertificate.h	(working copy)
@@ -5,18 +5,17 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct cert_obj {
-    zend_object zo;
+typedef struct _certificate_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPCertificateObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} certificate_obj;
 
-extern zend_object_handlers cert_obj_handlers;
+extern zend_object_handlers certificate_obj_handlers;
 extern zend_class_entry *cert_ce;
 
-void cert_free_storage(void *object TSRMLS_DC);
-zend_object_value cert_create_handler(zend_class_entry *type TSRMLS_DC);
+// zend_object* cert_create_handler(zend_class_entry *ce );
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void cert_init(TSRMLS_D);
+void cert_init(void);
 #endif
Index: PHPCadesCPCertificates.cpp
===================================================================
--- PHPCadesCPCertificates.cpp	(revision 251535)
+++ PHPCadesCPCertificates.cpp	(working copy)
@@ -5,8 +5,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPCertificates, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     certs_obj *obj =
-        (certs_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certs_obj *)((char *)zobj - XtOffsetOf(certs_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesCPCertificatesObject>(
         new CPPCadesCPCertificatesObject());
 }
@@ -19,7 +20,7 @@
     long lValidOnly;
     BOOL bValidOnly;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "lzl", &lType, &query,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "lzl", &lType, &query,
                               &lValidOnly) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -37,7 +38,7 @@
             RETURN_WITH_EXCEPTION(E_INVALIDARG);
         }
 
-        findCriteria.str = CAtlString(query->value.str.val);
+        findCriteria.str = CAtlString(query->value.str->val);
         findCriteria.dwCriteriaFlag = FIND_CRITERIA_STRING;
         break;
     }
@@ -53,7 +54,7 @@
     case CAPICOM_CERTIFICATE_FIND_EXTENSION:
     case CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY: {
         if (Z_TYPE_P(query) == IS_STRING) {
-            findCriteria.str = CAtlString(query->value.str.val);
+            findCriteria.str = CAtlString(query->value.str->val);
             findCriteria.dwCriteriaFlag = FIND_CRITERIA_STRING;
         } else {
             if (Z_TYPE_P(query) != IS_LONG) {
@@ -84,12 +85,14 @@
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
     }
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certs_obj *obj =
-        (certs_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certs_obj *)((char *)zobj - XtOffsetOf(certs_obj, zobj));
 
     object_init_ex(return_value, certs_ce);
+    zobj = Z_OBJ_P(return_value);
     certs_obj *cobj =
-        (certs_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (certs_obj *)((char *)zobj - XtOffsetOf(certs_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Find(
         Type, &findCriteria, bValidOnly, cobj->m_pCppCadesImpl));
@@ -98,20 +101,22 @@
 PHP_METHOD(CPCertificates, Item) {
     unsigned long lIdx;
     unsigned int Idx;
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lIdx) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lIdx) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Idx = (unsigned int)lIdx;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certs_obj *obj =
-        (certs_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certs_obj *)((char *)zobj - XtOffsetOf(certs_obj, zobj));
 
     boost::shared_ptr<CPPCadesCPCertificateObject> context;
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Item(Idx, context));
 
     object_init_ex(return_value, cert_ce);
-    cert_obj *cobj =
-        (cert_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+    zobj = Z_OBJ_P(return_value);
+    certificate_obj *cobj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
     cobj->m_pCppCadesImpl = context;
 }
 
@@ -118,65 +123,68 @@
 PHP_METHOD(CPCertificates, Count) {
     unsigned int count;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certs_obj *obj =
-        (certs_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certs_obj *)((char *)zobj - XtOffsetOf(certs_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Count(&count));
 
-    RETURN_LONG(count)
+    RETURN_LONG(count);
 }
 
 zend_object_handlers certs_obj_handlers;
 zend_class_entry *certs_ce;
 
-void certs_free_storage(void *object TSRMLS_DC) {
-    certs_obj *obj = (certs_obj *)object;
+static void certs_free(zend_object *object ) {
+    certs_obj *obj = (certs_obj *)((char *)object - XtOffsetOf(certs_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* certs_create_handler(zend_class_entry *ce ) {
+    certs_obj *obj = (certs_obj *)emalloc(sizeof(certs_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(certs_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &certs_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value certs_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificates_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    certs_obj *obj = (certs_obj *)emalloc(sizeof(certs_obj));
-    memset(obj, 0, sizeof(certs_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificates_find, 0, 0, 3)
+ ZEND_ARG_INFO(0, findtype)
+ ZEND_ARG_INFO(0, criteria)
+ ZEND_ARG_INFO(0, validonly)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificates_item, 0, 0, 1)
+ ZEND_ARG_INFO(0, index)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, certs_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &certs_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificates_count, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
-
 //связывание методов класса в function entry
 zend_function_entry certs_methods[] = {
-    PHP_ME(CPCertificates, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPCertificates, Find, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificates, Item, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificates, Count, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPCertificates, __construct, arginfo_cpcertificates_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPCertificates, Find, arginfo_cpcertificates_find, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificates, Item, arginfo_cpcertificates_item, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificates, Count, arginfo_cpcertificates_count, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void certs_init(TSRMLS_D) {
+void certs_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPCertificates", certs_methods);
-    certs_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    certs_ce = zend_register_internal_class(&ce );
     certs_ce->create_object = certs_create_handler;
     memcpy(&certs_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     certs_obj_handlers.clone_obj = NULL;
+    certs_obj_handlers.free_obj = certs_free;
+    certs_obj_handlers.offset = XtOffsetOf(certs_obj, zobj);
 }
Index: PHPCadesCPCertificates.h
===================================================================
--- PHPCadesCPCertificates.h	(revision 251535)
+++ PHPCadesCPCertificates.h	(working copy)
@@ -3,11 +3,11 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct certs_obj {
-    zend_object zo;
+typedef struct _certs_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPCertificatesObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} certs_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers certs_obj_handlers;
@@ -14,13 +14,13 @@
 extern zend_class_entry *certs_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void certs_free_storage(void *object TSRMLS_DC);
+// void certs_free_storage(void *object );
 
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value certs_create_handler(zend_class_entry *type TSRMLS_DC);
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value certs_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void certs_init(TSRMLS_D);
+void certs_init(void);
 #endif
Index: PHPCadesCPCertificateStatus.cpp
===================================================================
--- PHPCadesCPCertificateStatus.cpp	(revision 251535)
+++ PHPCadesCPCertificateStatus.cpp	(working copy)
@@ -6,8 +6,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPCertificateStatus, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesCPCertificateStatusObject>(
         new CPPCadesCPCertificateStatusObject());
 }
@@ -14,31 +15,35 @@
 
 PHP_METHOD(CPCertificateStatus, get_Result) {
     BOOL res;
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Result(&res));
 
-    RETURN_LONG(res)
+    RETURN_LONG(res);
 }
 
 PHP_METHOD(CPCertificateStatus, get_CheckFlag) {
     CAPICOM_CHECK_FLAG flag;
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_CheckFlag(&flag));
 
-    RETURN_LONG(flag)
+    RETURN_LONG(flag);
 }
 
 PHP_METHOD(CPCertificateStatus, set_CheckFlag) {
     long lFlag;
     CAPICOM_CHECK_FLAG Flag;
+
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lFlag) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lFlag) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -49,14 +54,17 @@
 
 PHP_METHOD(CPCertificateStatus, EKU) {
     boost::shared_ptr<CPPCadesCPEKUObject> ptr(new CPPCadesCPEKUObject());
+
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->EKU(ptr));
 
     object_init_ex(return_value, eku_ce);
+    zobj = Z_OBJ_P(return_value);
     eku_obj *eobj =
-        (eku_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (eku_obj *)((char *)zobj - XtOffsetOf(eku_obj, zobj));
 
     eobj->m_pCppCadesImpl = ptr;
 }
@@ -65,8 +73,9 @@
     CryptoPro::CDateTime time;
     CryptoPro::CStringProxy strpr;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_VerificationTime(time));
 
@@ -77,12 +86,13 @@
 PHP_METHOD(CPCertificateStatus, set_VerificationTime) {
     CryptoPro::CDateTime time;
     char *str;
-    int len;
+    size_t len;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -97,10 +107,11 @@
 PHP_METHOD(CPCertificateStatus, set_UrlRetrievalTimeout) {
     long urt;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &urt) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &urt) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_UrlRetrievalTimeout(urt));
@@ -109,12 +120,13 @@
 PHP_METHOD(CPCertificateStatus, get_UrlRetrievalTimeout) {
     long urt;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_UrlRetrievalTimeout(&urt));
 
-    RETURN_LONG(urt)
+    RETURN_LONG(urt);
 }
 
 PHP_METHOD(CPCertificateStatus, CertificatePolicies) {
@@ -123,8 +135,9 @@
     unsigned int count;
     zval *CPoid = new zval();
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->CertificatePolicies(oids));
     HR_ERRORCHECK_RETURN(oids->get_Count(&count));
@@ -134,7 +147,8 @@
 
     for (unsigned int i = 1; i <= count; i++) {
         HR_ERRORCHECK_RETURN(oids->get_Item(i, oid));
-        oid_obj *arg = (oid_obj *)zend_object_store_get_object(CPoid TSRMLS_CC);
+        zobj = Z_OBJ_P(CPoid);
+        oid_obj *arg = (oid_obj *)((char *)zobj - XtOffsetOf(oid_obj, zobj));
         arg->m_pCppCadesImpl = oid;
         add_next_index_zval(CPoid, return_value);
     }
@@ -146,8 +160,9 @@
     unsigned int count;
     zval *CPoid = new zval();
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->ApplicationPolicies(oids));
     HR_ERRORCHECK_RETURN(oids->get_Count(&count));
@@ -157,7 +172,8 @@
 
     for (unsigned int i = 1; i <= count; i++) {
         HR_ERRORCHECK_RETURN(oids->get_Item(i, oid));
-        oid_obj *arg = (oid_obj *)zend_object_store_get_object(CPoid TSRMLS_CC);
+        zobj = Z_OBJ_P(CPoid);
+        oid_obj *arg = (oid_obj *)((char *)zobj - XtOffsetOf(oid_obj, zobj));
         arg->m_pCppCadesImpl = oid;
         add_next_index_zval(CPoid, return_value);
     }
@@ -167,15 +183,17 @@
     boost::shared_ptr<CPPCadesCPCertificatesObject> certs(
         new CPPCadesCPCertificatesObject());
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     certstat_obj *obj =
-        (certstat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (certstat_obj *)((char *)zobj - XtOffsetOf(certstat_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_ValidationCertificates(certs));
 
     object_init_ex(return_value, certs_ce);
+    zobj = Z_OBJ_P(return_value);
     certs_obj *cobj =
-        (certs_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (certs_obj *)((char *)zobj - XtOffsetOf(certs_obj, zobj));
     cobj->m_pCppCadesImpl = certs;
 }
 
@@ -182,64 +200,87 @@
 zend_object_handlers certstat_obj_handlers;
 zend_class_entry *certstat_ce;
 
-void certstat_free_storage(void *object TSRMLS_DC) {
-    certstat_obj *obj = (certstat_obj *)object;
+static void certstat_free(zend_object *object ) {
+    certstat_obj *obj = (certstat_obj *)((char *)object - XtOffsetOf(certstat_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* certstat_create_handler(zend_class_entry *ce ) {
+    certstat_obj *obj = (certstat_obj *)emalloc(sizeof(certstat_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(certstat_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &certstat_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value certstat_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    certstat_obj *obj = (certstat_obj *)emalloc(sizeof(certstat_obj));
-    memset(obj, 0, sizeof(certstat_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_get_result, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_get_checkflag, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle = zend_objects_store_put(obj, NULL, certstat_free_storage,
-                                           NULL TSRMLS_CC);
-    retval.handlers = &certstat_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_set_checkflag, 0, 0, 1)
+ ZEND_ARG_INFO(0, checkflag)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_eku, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_get_verificationtime, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_set_verificationtime, 0, 0, 1)
+ ZEND_ARG_INFO(0, time)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_get_urlretrievaltimeout, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_set_urlretrievaltimeout, 0, 0, 1)
+ ZEND_ARG_INFO(0, timeout)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_certificatepolicies, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_applicationpolicies, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpcertificatestatus_get_validationcertificates, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
 //связывание методов класса в function entry
 zend_function_entry certstat_methods[] = {
-    PHP_ME(CPCertificateStatus, __construct, NULL,
-           ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPCertificateStatus, get_Result, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, get_CheckFlag, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, set_CheckFlag, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, EKU, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, get_VerificationTime, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, set_VerificationTime, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, get_UrlRetrievalTimeout, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, set_UrlRetrievalTimeout, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, CertificatePolicies, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, ApplicationPolicies, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPCertificateStatus, get_ValidationCertificates, NULL,
-           ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPCertificateStatus, __construct, arginfo_cpcertificatestatus_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPCertificateStatus, get_Result, arginfo_cpcertificatestatus_get_result, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, get_CheckFlag, arginfo_cpcertificatestatus_get_checkflag, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, set_CheckFlag, arginfo_cpcertificatestatus_set_checkflag, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, EKU, arginfo_cpcertificatestatus_eku, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, get_VerificationTime, arginfo_cpcertificatestatus_get_verificationtime, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, set_VerificationTime, arginfo_cpcertificatestatus_set_verificationtime, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, get_UrlRetrievalTimeout, arginfo_cpcertificatestatus_get_urlretrievaltimeout, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, set_UrlRetrievalTimeout, arginfo_cpcertificatestatus_set_urlretrievaltimeout, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, CertificatePolicies, arginfo_cpcertificatestatus_certificatepolicies, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, ApplicationPolicies, arginfo_cpcertificatestatus_applicationpolicies, ZEND_ACC_PUBLIC)
+    PHP_ME(CPCertificateStatus, get_ValidationCertificates, arginfo_cpcertificatestatus_get_validationcertificates, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void certstat_init(TSRMLS_D) {
+void certstat_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPCertificateStatus", certstat_methods);
-    certstat_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    certstat_ce = zend_register_internal_class(&ce );
     certstat_ce->create_object = certstat_create_handler;
     memcpy(&certstat_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     certstat_obj_handlers.clone_obj = NULL;
+    certstat_obj_handlers.free_obj = certstat_free;
+    certstat_obj_handlers.offset = XtOffsetOf(certstat_obj, zobj);
 }
Index: PHPCadesCPCertificateStatus.h
===================================================================
--- PHPCadesCPCertificateStatus.h	(revision 251535)
+++ PHPCadesCPCertificateStatus.h	(working copy)
@@ -5,24 +5,24 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct certstat_obj {
-    zend_object zo;
+typedef struct _certstat_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPCertificateStatusObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} certstat_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers certstat_obj_handlers;
 extern zend_class_entry *certstat_ce;
 
-//функция освобождения памяти. используется при уничтожении объектов
-void certstat_free_storage(void *object TSRMLS_DC);
+// //функция освобождения памяти. используется при уничтожении объектов
+// void certstat_free_storage(void *object );
 
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value certstat_create_handler(zend_class_entry *type TSRMLS_DC);
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value certstat_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void certstat_init(TSRMLS_D);
+void certstat_init(void);
 #endif
Index: PHPCadesCPEKU.cpp
===================================================================
--- PHPCadesCPEKU.cpp	(revision 251535)
+++ PHPCadesCPEKU.cpp	(working copy)
@@ -2,10 +2,12 @@
 #include "PHPCadesCPEKU.h"
 using namespace CryptoPro::PKI::CAdES;
 
-//Методы
+//РњРµС‚РѕРґС‹
 PHP_METHOD(CPEKU, __construct) {
 
-    eku_obj *obj = (eku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_obj *obj =
+        (eku_obj *)((char *)zobj - XtOffsetOf(eku_obj, zobj));
     boost::shared_ptr<CPPCadesCPEKUObject> eku(new CPPCadesCPEKUObject());
     obj->m_pCppCadesImpl = eku;
 }
@@ -13,11 +15,13 @@
 PHP_METHOD(CPEKU, get_Name) {
     CAPICOM_EKU Name;
 
-    eku_obj *obj = (eku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_obj *obj =
+        (eku_obj *)((char *)zobj - XtOffsetOf(eku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Name(&Name));
 
-    RETURN_LONG(Name)
+    RETURN_LONG(Name);
 }
 
 PHP_METHOD(CPEKU, set_Name) {
@@ -24,13 +28,15 @@
     long lName;
     CAPICOM_EKU Name;
 
-    eku_obj *obj = (eku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lName) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lName) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
-
     Name = (CAPICOM_EKU)lName;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_obj *obj =
+        (eku_obj *)((char *)zobj - XtOffsetOf(eku_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Name(Name));
 }
 
@@ -37,7 +43,9 @@
 PHP_METHOD(CPEKU, get_OID) {
     CAtlStringA OID;
 
-    eku_obj *obj = (eku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_obj *obj =
+        (eku_obj *)((char *)zobj - XtOffsetOf(eku_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_OID(OID));
 
     RETURN_ATL_STRING_A(OID)
@@ -46,70 +54,75 @@
 PHP_METHOD(CPEKU, set_OID) {
     CAtlStringA OIDw;
     char *OID;
-    int len;
-
-    eku_obj *obj = (eku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &OID, &len) ==
+    size_t len;
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &OID, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_obj *obj =
+        (eku_obj *)((char *)zobj - XtOffsetOf(eku_obj, zobj));
+
     OIDw = CAtlString(OID);
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_OID(OIDw));
 }
 
-//Вспомогательные функции обертки
+//Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё РѕР±РµСЂС‚РєРё
 zend_object_handlers eku_obj_handlers;
 zend_class_entry *eku_ce;
 
-void eku_free_storage(void *object TSRMLS_DC) {
-    eku_obj *obj = (eku_obj *)object;
+static void eku_free(zend_object *object) {
+    eku_obj *obj = (eku_obj *)((char *)object - XtOffsetOf(eku_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* eku_create_handler(zend_class_entry *ce ) {
+    eku_obj *obj = (eku_obj *)emalloc(sizeof(eku_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(eku_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &eku_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value eku_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpeku_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    eku_obj *obj = (eku_obj *)emalloc(sizeof(eku_obj));
-    memset(obj, 0, sizeof(eku_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpeku_get_name, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpeku_set_name, 0, 0, 1)
+ ZEND_ARG_INFO(0, name)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, eku_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &eku_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpeku_get_oid, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpeku_set_oid, 0, 0, 1)
+ ZEND_ARG_INFO(0, oid)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry eku_methods[] = {
-    PHP_ME(CPEKU, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPEKU, get_Name, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEKU, set_Name, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEKU, get_OID, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEKU, set_OID, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPEKU, __construct, arginfo_cpeku_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPEKU, get_Name, arginfo_cpeku_get_name, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEKU, set_Name, arginfo_cpeku_set_name, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEKU, get_OID, arginfo_cpeku_get_oid, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEKU, set_OID, arginfo_cpeku_set_oid, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void eku_init(TSRMLS_D) {
+void eku_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPEKU", eku_methods);
-    eku_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    eku_ce = zend_register_internal_class(&ce );
     eku_ce->create_object = eku_create_handler;
     memcpy(&eku_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     eku_obj_handlers.clone_obj = NULL;
+    eku_obj_handlers.free_obj = eku_free;
+    eku_obj_handlers.offset = XtOffsetOf(eku_obj, zobj);
 }
Index: PHPCadesCPEKU.h
===================================================================
--- PHPCadesCPEKU.h	(revision 251535)
+++ PHPCadesCPEKU.h	(working copy)
@@ -5,20 +5,20 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct eku_obj {
-    zend_object zo;
+typedef struct _eku_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPEKUObject> m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} eku_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers eku_obj_handlers;
 extern zend_class_entry *eku_ce;
 
-void eku_free_storage(void *object TSRMLS_DC);
-zend_object_value item_create_handler(zend_class_entry *type TSRMLS_DC);
+// void eku_free_storage(void *object );
+// zend_object_value item_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void eku_init(TSRMLS_D);
+void eku_init(void);
 
 #endif
Index: PHPCadesCPEKUs.cpp
===================================================================
--- PHPCadesCPEKUs.cpp	(revision 251535)
+++ PHPCadesCPEKUs.cpp	(working copy)
@@ -3,9 +3,11 @@
 #include "PHPCadesCPEKUs.h"
 using namespace CryptoPro::PKI::CAdES;
 
-//Методы
+//РњРµС‚РѕРґС‹
 PHP_METHOD(CPEKUs, __construct) {
-    eku_col *obj = (eku_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_col_obj *obj =
+        (eku_col_obj *)((char *)zobj - XtOffsetOf(eku_col_obj, zobj));
     boost::shared_ptr<CPPCadesCPEKUsObject> ptr(new CPPCadesCPEKUsObject());
     obj->m_pCppCadesImpl = ptr;
 }
@@ -12,23 +14,28 @@
 
 PHP_METHOD(CPEKUs, Add) {
     zval *item;
-    eku_col *obj = (eku_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_col_obj *obj =
+        (eku_col_obj *)((char *)zobj - XtOffsetOf(eku_col_obj, zobj));
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "O", &item,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "O", &item,
                               obj->type) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    eku_obj *iobj = (eku_obj *)zend_object_store_get_object(item TSRMLS_CC);
+    zobj = Z_OBJ_P(item);
+    eku_obj *iobj = (eku_obj *)((char *)item - XtOffsetOf(eku_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Add(iobj->m_pCppCadesImpl));
 }
 
 PHP_METHOD(CPEKUs, get_Count) {
     unsigned int count;
-    eku_col *obj = (eku_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_col_obj *obj =
+        (eku_col_obj *)((char *)zobj - XtOffsetOf(eku_col_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Count(&count));
 
-    RETURN_LONG(count)
+    RETURN_LONG(count);
 }
 
 PHP_METHOD(CPEKUs, get_Item) {
@@ -35,22 +42,27 @@
     long idx;
     boost::shared_ptr<CPPCadesCPEKUObject> item;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &idx) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &idx) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    eku_col *obj = (eku_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_col_obj *obj =
+        (eku_col_obj *)((char *)zobj - XtOffsetOf(eku_col_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Item(idx, item));
     if (item == NULL)
         RETURN_WITH_EXCEPTION(ERROR_NO_MORE_ITEMS);
 
     object_init_ex(return_value, obj->type);
+    zobj = Z_OBJ_P(return_value);
     eku_obj *iobj =
-        (eku_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (eku_obj *)((char *)zobj - XtOffsetOf(eku_obj, zobj));
     iobj->m_pCppCadesImpl = item;
 }
 
 PHP_METHOD(CPEKUs, Clear) {
-    eku_col *obj = (eku_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_col_obj *obj =
+        (eku_col_obj *)((char *)zobj - XtOffsetOf(eku_col_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Clear());
 }
 
@@ -57,67 +69,76 @@
 PHP_METHOD(CPEKUs, Remove) {
     long idx;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &idx) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &idx) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    eku_col *obj = (eku_col *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    eku_col_obj *obj =
+        (eku_col_obj *)((char *)zobj - XtOffsetOf(eku_col_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Remove(idx));
 }
 
-//Вспомогательные функции обертки
+//Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё РѕР±РµСЂС‚РєРё
 zend_class_entry *eku_col_ce;
-zend_object_handlers eku_col_handlers;
+zend_object_handlers eku_col_obj_handlers;
 
-void eku_col_free_storage(void *object TSRMLS_DC) {
-    eku_col *obj = (eku_col *)object;
+static void eku_col_free(zend_object *object) {
+    eku_col_obj *obj = (eku_col_obj *)((char *)object - XtOffsetOf(eku_col_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* eku_col_create_handler(zend_class_entry *ce ) {
+    eku_col_obj *obj = (eku_col_obj *)emalloc(sizeof(eku_col_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(eku_col_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &eku_col_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value eku_col_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpekus_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    eku_col *obj = (eku_col *)emalloc(sizeof(eku_col));
-    memset(obj, 0, sizeof(eku_col));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpekus_add, 0, 0, 1)
+ ZEND_ARG_INFO(0, item)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpekus_get_count, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, eku_col_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &eku_col_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpekus_get_item, 0, 0, 1)
+ ZEND_ARG_INFO(0, index)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpekus_clear, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpekus_remove, 0, 0, 1)
+ ZEND_ARG_INFO(0, index)
+ZEND_END_ARG_INFO()
+
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry eku_col_methods[] = {
-    PHP_ME(CPEKUs, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPEKUs, Add, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEKUs, get_Count, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEKUs, get_Item, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEKUs, Clear, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEKUs, Remove, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPEKUs, __construct, arginfo_cpekus_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPEKUs, Add, arginfo_cpekus_add, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEKUs, get_Count, arginfo_cpekus_get_count, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEKUs, get_Item, arginfo_cpekus_get_item, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEKUs, Clear, arginfo_cpekus_clear, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEKUs, Remove, arginfo_cpekus_remove, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void eku_col_init(TSRMLS_D) {
+void eku_col_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPEKUs", eku_col_methods);
-    eku_col_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    eku_col_ce = zend_register_internal_class(&ce );
     eku_col_ce->create_object = eku_col_create_handler;
-    memcpy(&eku_col_handlers, zend_get_std_object_handlers(),
+    memcpy(&eku_col_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    eku_col_handlers.clone_obj = NULL;
+    eku_col_obj_handlers.clone_obj = NULL;
+    eku_col_obj_handlers.free_obj = eku_col_free;
+    eku_col_obj_handlers.offset = XtOffsetOf(eku_col_obj, zobj);
 }
Index: PHPCadesCPEKUs.h
===================================================================
--- PHPCadesCPEKUs.h	(revision 251535)
+++ PHPCadesCPEKUs.h	(working copy)
@@ -5,20 +5,20 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct eku_col {
-    zend_object zo;
+typedef struct _eku_col_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPEKUsObject> m_pCppCadesImpl;
     zend_class_entry *type;
-};
+    zend_object zobj; /* MUST be the last element */
+} eku_col_obj;
 
 extern zend_class_entry *eku_col_ce;
 extern zend_object_handlers eku_col_handlers;
 
-void eku_col_free_storage(void *object TSRMLS_DC);
-zend_object_value eku_col_create_handler(zend_class_entry *type TSRMLS_DC);
+// void eku_col_free_storage(void *object );
+// zend_object_value eku_col_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void eku_col_init(TSRMLS_D);
+void eku_col_init(void);
 
 #endif
Index: PHPCadesCPEncodedData.cpp
===================================================================
--- PHPCadesCPEncodedData.cpp	(revision 251535)
+++ PHPCadesCPEncodedData.cpp	(working copy)
@@ -3,8 +3,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPEncodedData, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     encoded_data_obj *obj =
-        (encoded_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (encoded_data_obj *)((char *)zobj - XtOffsetOf(encoded_data_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesCPEncodedDataObject>(
         new CPPCadesCPEncodedDataObject());
 }
@@ -14,10 +15,11 @@
     long lML;
     BOOL bML;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     encoded_data_obj *obj =
-        (encoded_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (encoded_data_obj *)((char *)zobj - XtOffsetOf(encoded_data_obj, zobj));
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lML) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lML) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     bML = (BOOL)lML;
@@ -24,7 +26,7 @@
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Format(bML, atlstr));
 
-    RETURN_ATL_STRING_W(atlstr)
+    RETURN_ATL_STRING_W(atlstr);
 }
 
 PHP_METHOD(CPEncodedData, get_Value) {
@@ -34,10 +36,11 @@
     char *str;
     unsigned int len;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     encoded_data_obj *obj =
-        (encoded_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (encoded_data_obj *)((char *)zobj - XtOffsetOf(encoded_data_obj, zobj));
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lType) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lType) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -49,61 +52,56 @@
     str = (char *)ecalloc(len, sizeof(char));
     memcpy(str, data.pbData(), len);
 
-    RETURN_STRINGL(str, len, 0)
+    RETURN_STRINGL(str, len);
 }
 
 zend_object_handlers encoded_data_obj_handlers;
 zend_class_entry *encoded_data_ce;
 
-void encoded_data_free_storage(void *object TSRMLS_DC) {
-    encoded_data_obj *obj = (encoded_data_obj *)object;
+static void encoded_data_free(zend_object *object ) {
+    encoded_data_obj *obj = (encoded_data_obj *)((char *)object - XtOffsetOf(encoded_data_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
-
-    efree(obj);
+    zend_object_std_dtor(object);
 }
 
-zend_object_value encoded_data_create_handler(zend_class_entry *type
-                                                  TSRMLS_DC) {
-    zend_object_value retval;
+static zend_object* encoded_data_create_handler(zend_class_entry *ce ) {
+    encoded_data_obj *obj = (encoded_data_obj *)emalloc(sizeof(encoded_data_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(encoded_data_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &encoded_data_obj_handlers;
 
-    encoded_data_obj *obj =
-        (encoded_data_obj *)emalloc(sizeof(encoded_data_obj));
-    memset(obj, 0, sizeof(encoded_data_obj));
-    obj->zo.ce = type;
+    return &obj->zobj;
+}
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpencodeddata_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle = zend_objects_store_put(obj, NULL, encoded_data_free_storage,
-                                           NULL TSRMLS_CC);
-    retval.handlers = &encoded_data_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpencodeddata_format, 0, 0, 1)
+ ZEND_ARG_INFO(0, multiline)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpencodeddata_get_value, 0, 0, 1)
+ ZEND_ARG_INFO(0, type)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry encoded_data_methods[] = {
-    PHP_ME(CPEncodedData, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPEncodedData, Format, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEncodedData, get_Value, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPEncodedData, __construct, arginfo_cpencodeddata_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPEncodedData, Format, arginfo_cpencodeddata_format, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEncodedData, get_Value, arginfo_cpencodeddata_get_value, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void encoded_data_init(TSRMLS_D) {
+void encoded_data_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPEncodedData", encoded_data_methods);
-    encoded_data_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    encoded_data_ce = zend_register_internal_class(&ce );
     encoded_data_ce->create_object = encoded_data_create_handler;
     memcpy(&encoded_data_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     encoded_data_obj_handlers.clone_obj = NULL;
+    encoded_data_obj_handlers.free_obj = encoded_data_free;
+    encoded_data_obj_handlers.offset = XtOffsetOf(encoded_data_obj, zobj);
 }
Index: PHPCadesCPEncodedData.h
===================================================================
--- PHPCadesCPEncodedData.h	(revision 251535)
+++ PHPCadesCPEncodedData.h	(working copy)
@@ -5,11 +5,11 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct encoded_data_obj {
-    zend_object zo;
+typedef struct _encoded_data_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPEncodedDataObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} encoded_data_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers encoded_data_obj_handlers;
@@ -16,12 +16,12 @@
 extern zend_class_entry *encoded_data_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void encoded_data_free_storage(void *object TSRMLS_DC);
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value encoded_data_create_handler(zend_class_entry *type TSRMLS_DC);
+// void encoded_data_free_storage(void *object );
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value encoded_data_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void encoded_data_init(TSRMLS_D);
+void encoded_data_init(void);
 #endif
Index: PHPCadesCPEnvelopedData.cpp
===================================================================
--- PHPCadesCPEnvelopedData.cpp	(revision 251535)
+++ PHPCadesCPEnvelopedData.cpp	(working copy)
@@ -5,8 +5,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPEnvelopedData, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     enveloped_data_obj *obj =
-        (enveloped_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (enveloped_data_obj *)((char *)zobj - XtOffsetOf(enveloped_data_obj, zobj));
     obj->m_pCppCadesImpl = new CPPCadesCPEnvelopedDataObject();
 }
 
@@ -13,24 +14,26 @@
 PHP_METHOD(CPEnvelopedData, get_Content) {
     CStringBlob content;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     enveloped_data_obj *obj =
-        (enveloped_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (enveloped_data_obj *)((char *)zobj - XtOffsetOf(enveloped_data_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Content(content));
 
-    RETURN_ATL_STRING_A(content)
+    RETURN_ATL_STRING_A(content);
 }
 
 PHP_METHOD(CPEnvelopedData, set_Content) {
     char *str;
-    unsigned int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     enveloped_data_obj *obj =
-        (enveloped_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (enveloped_data_obj *)((char *)zobj - XtOffsetOf(enveloped_data_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Content(str, len));
 }
@@ -38,22 +41,24 @@
 PHP_METHOD(CPEnvelopedData, get_ContentEncoding) {
     CADESCOM_CONTENT_ENCODING_TYPE type;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     enveloped_data_obj *obj =
-        (enveloped_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (enveloped_data_obj *)((char *)zobj - XtOffsetOf(enveloped_data_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_ContentEncoding(&type));
 
-    RETURN_LONG(type)
+    RETURN_LONG(type);
 }
 
 PHP_METHOD(CPEnvelopedData, set_ContentEncoding) {
     int type;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &type) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &type) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     enveloped_data_obj *obj =
-        (enveloped_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (enveloped_data_obj *)((char *)zobj - XtOffsetOf(enveloped_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_ContentEncoding(
         (CADESCOM_CONTENT_ENCODING_TYPE)type));
 }
@@ -65,14 +70,15 @@
     char *str;
     int len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lType) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lType) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Type = (CAPICOM_ENCODING_TYPE)lType;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     enveloped_data_obj *obj =
-        (enveloped_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (enveloped_data_obj *)((char *)zobj - XtOffsetOf(enveloped_data_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Encrypt(Type, data));
 
@@ -80,20 +86,21 @@
     str = (char *)ecalloc(len, sizeof(char));
     memcpy(str, data.pbData(), len);
 
-    RETURN_STRINGL(str, len, 0)
+    RETURN_STRINGL(str, len);
 }
 
 PHP_METHOD(CPEnvelopedData, Decrypt) {
     CryptoPro::CBlob data;
     unsigned char *str;
-    int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     enveloped_data_obj *obj =
-        (enveloped_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (enveloped_data_obj *)((char *)zobj - XtOffsetOf(enveloped_data_obj, zobj));
     data.assign(str, len);
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Decrypt(data));
@@ -100,11 +107,13 @@
 }
 
 PHP_METHOD(CPEnvelopedData, get_Recipients) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     enveloped_data_obj *obj =
-        (enveloped_data_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
-    object_init_ex(return_value, recipients_class_entry);
+        (enveloped_data_obj *)((char *)zobj - XtOffsetOf(enveloped_data_obj, zobj));
+    object_init_ex(return_value, recipients_ce);
+    zobj = Z_OBJ_P(return_value);
     recipients_obj *Recipients_ptr =
-        (recipients_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (recipients_obj *)((char *)zobj - XtOffsetOf(recipients_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_Recipients(Recipients_ptr->m_pCppCadesImpl));
@@ -113,62 +122,74 @@
 zend_object_handlers enveloped_data_obj_handlers;
 zend_class_entry *enveloped_data_ce;
 
-void enveloped_data_free_storage(void *object TSRMLS_DC) {
-    enveloped_data_obj *obj = (enveloped_data_obj *)object;
-    delete obj->m_pCppCadesImpl;
+static void enveloped_data_free(zend_object *object ) {
+    enveloped_data_obj *obj = (enveloped_data_obj *)((char *)object - XtOffsetOf(enveloped_data_obj, zobj));
+    delete(obj->m_pCppCadesImpl);
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* enveloped_data_create_handler(zend_class_entry *ce
+                                                    ) {
+    enveloped_data_obj *obj = (enveloped_data_obj *)emalloc(sizeof(enveloped_data_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(enveloped_data_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &enveloped_data_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value enveloped_data_create_handler(zend_class_entry *type
-                                                    TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpenvelopeddata_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    enveloped_data_obj *obj =
-        (enveloped_data_obj *)emalloc(sizeof(enveloped_data_obj));
-    memset(obj, 0, sizeof(enveloped_data_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpenvelopeddata_get_content, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpenvelopeddata_set_content, 0, 0, 1)
+ ZEND_ARG_INFO(0, content)
+ZEND_END_ARG_INFO()
 
-    retval.handle = zend_objects_store_put(
-        obj, NULL, enveloped_data_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &enveloped_data_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpenvelopeddata_get_contentencoding, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpenvelopeddata_set_contentencoding, 0, 0, 1)
+ ZEND_ARG_INFO(0, contentencoding)
+ZEND_END_ARG_INFO()
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpenvelopeddata_encrypt, 0, 0, 1)
+ ZEND_ARG_INFO(0, encodingtype)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpenvelopeddata_decrypt, 0, 0, 1)
+ ZEND_ARG_INFO(0, data)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpenvelopeddata_get_recipients, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
 //связывание методов класса в function entry
 zend_function_entry enveloped_data_methods[] = {
-    PHP_ME(CPEnvelopedData, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPEnvelopedData, get_Content, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEnvelopedData, set_Content, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEnvelopedData, get_ContentEncoding, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEnvelopedData, set_ContentEncoding, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEnvelopedData, Encrypt, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPEnvelopedData, Decrypt, NULL, ZEND_ACC_PUBLIC)
-    /*PHP_ME(CPEnvelopedData, get_Algorithm,       NULL, ZEND_ACC_PUBLIC)*/
-    PHP_ME(CPEnvelopedData, get_Recipients, NULL, ZEND_ACC_PUBLIC){NULL, NULL,
-                                                                   NULL}};
+    PHP_ME(CPEnvelopedData, __construct, arginfo_cpenvelopeddata_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPEnvelopedData, get_Content, arginfo_cpenvelopeddata_get_content, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEnvelopedData, set_Content, arginfo_cpenvelopeddata_set_content, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEnvelopedData, get_ContentEncoding, arginfo_cpenvelopeddata_get_contentencoding, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEnvelopedData, set_ContentEncoding, arginfo_cpenvelopeddata_set_contentencoding, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEnvelopedData, Encrypt, arginfo_cpenvelopeddata_encrypt, ZEND_ACC_PUBLIC)
+    PHP_ME(CPEnvelopedData, Decrypt, arginfo_cpenvelopeddata_decrypt, ZEND_ACC_PUBLIC)
+    /*PHP_ME(CPEnvelopedData, get_Algorithm, NULL, ZEND_ACC_PUBLIC)*/
+    PHP_ME(CPEnvelopedData, get_Recipients, arginfo_cpenvelopeddata_get_recipients, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void enveloped_data_init(TSRMLS_D) {
+void enveloped_data_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPEnvelopedData", enveloped_data_methods);
-    enveloped_data_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    enveloped_data_ce = zend_register_internal_class(&ce );
     enveloped_data_ce->create_object = enveloped_data_create_handler;
     memcpy(&enveloped_data_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     enveloped_data_obj_handlers.clone_obj = NULL;
+    enveloped_data_obj_handlers.free_obj = enveloped_data_free;
+    enveloped_data_obj_handlers.offset = XtOffsetOf(enveloped_data_obj, zobj);
 }
Index: PHPCadesCPEnvelopedData.h
===================================================================
--- PHPCadesCPEnvelopedData.h	(revision 251535)
+++ PHPCadesCPEnvelopedData.h	(working copy)
@@ -5,10 +5,10 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct enveloped_data_obj {
-    zend_object zo;
+typedef struct _enveloped_data_obj {
     CryptoPro::PKI::CAdES::CPPCadesCPEnvelopedDataObject *m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} enveloped_data_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers enveloped_data_obj_handlers;
@@ -15,13 +15,13 @@
 extern zend_class_entry *enveloped_data_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void enveloped_data_free_storage(void *object TSRMLS_DC);
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value enveloped_data_create_handler(zend_class_entry *type
-                                                    TSRMLS_DC);
+// void enveloped_data_free_storage(void *object );
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value enveloped_data_create_handler(zend_class_entry *type
+//                                                     );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void enveloped_data_init(TSRMLS_D);
+void enveloped_data_init(void);
 #endif
Index: PHPCadesCPExtendedKeyUsage.cpp
===================================================================
--- PHPCadesCPExtendedKeyUsage.cpp	(revision 251535)
+++ PHPCadesCPExtendedKeyUsage.cpp	(working copy)
@@ -5,9 +5,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPExtendedKeyUsage, __construct) {
-
+    zend_object *zobj = Z_OBJ_P(getThis());
     exku_obj *obj =
-        (exku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (exku_obj *)((char *)zobj - XtOffsetOf(exku_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesCPExtendedKeyUsageObject>(
         new CPPCadesCPExtendedKeyUsageObject());
 }
@@ -15,33 +15,37 @@
 PHP_METHOD(CPExtendedKeyUsage, get_IsPresent) {
     BOOL val;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     exku_obj *obj =
-        (exku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (exku_obj *)((char *)zobj - XtOffsetOf(exku_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsPresent(&val));
 
-    RETURN_LONG(val)
+    RETURN_LONG(val);
 }
 
 PHP_METHOD(CPExtendedKeyUsage, get_IsCritical) {
     BOOL val;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     exku_obj *obj =
-        (exku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (exku_obj *)((char *)zobj - XtOffsetOf(exku_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsCritical(&val));
 
-    RETURN_LONG(val)
+    RETURN_LONG(val);
 }
 
 PHP_METHOD(CPExtendedKeyUsage, get_EKUs) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     exku_obj *obj =
-        (exku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (exku_obj *)((char *)zobj - XtOffsetOf(exku_obj, zobj));
     boost::shared_ptr<CPPCadesCPEKUsObject> ptr(new CPPCadesCPEKUsObject());
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_EKUs(ptr));
 
     object_init_ex(return_value, eku_col_ce);
-    eku_col *ekus =
-        (eku_col *)zend_object_store_get_object(return_value TSRMLS_CC);
+    zobj = Z_OBJ_P(return_value);
+    eku_col_obj *ekus =
+        (eku_col_obj *)((char *)zobj - XtOffsetOf(eku_col_obj, zobj));
 
     ekus->m_pCppCadesImpl = ptr;
     ekus->type = eku_ce;
@@ -50,55 +54,52 @@
 zend_object_handlers exku_obj_handlers;
 zend_class_entry *exku_ce;
 
-void exku_free_storage(void *object TSRMLS_DC) {
-    exku_obj *obj = (exku_obj *)object;
+static void exku_free(zend_object* object) {
+    exku_obj *obj = (exku_obj *)((char *)object - XtOffsetOf(exku_obj, zobj));;
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* exku_create_handler(zend_class_entry *ce ) {
+    exku_obj *obj = (exku_obj *)emalloc(sizeof(exku_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(exku_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &exku_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value exku_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpextendedkeyusage_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    exku_obj *obj = (exku_obj *)emalloc(sizeof(exku_obj));
-    memset(obj, 0, sizeof(exku_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpextendedkeyusage_get_ispresent, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpextendedkeyusage_get_iscritical, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, exku_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &exku_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpextendedkeyusage_get_ekus, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
-
-//связывание методов класса в function entry
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry exku_methods[] = {
-    PHP_ME(CPExtendedKeyUsage, __construct, NULL,
-           ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPExtendedKeyUsage, get_IsPresent, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPExtendedKeyUsage, get_IsCritical, NULL, ZEND_ACC_PUBLIC) PHP_ME(
-        CPExtendedKeyUsage, get_EKUs, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPExtendedKeyUsage, __construct, arginfo_cpextendedkeyusage_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPExtendedKeyUsage, get_IsPresent, arginfo_cpextendedkeyusage_get_ispresent, ZEND_ACC_PUBLIC)
+    PHP_ME(CPExtendedKeyUsage, get_IsCritical, arginfo_cpextendedkeyusage_get_iscritical, ZEND_ACC_PUBLIC) 
+    PHP_ME(CPExtendedKeyUsage, get_EKUs, arginfo_cpextendedkeyusage_get_ekus, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void exku_init(TSRMLS_D) {
+void exku_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPExtendedKeyUsage", exku_methods);
-    exku_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    exku_ce = zend_register_internal_class(&ce );
     exku_ce->create_object = exku_create_handler;
     memcpy(&exku_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     exku_obj_handlers.clone_obj = NULL;
+    exku_obj_handlers.free_obj = exku_free;
+    exku_obj_handlers.offset = XtOffsetOf(exku_obj, zobj);
 }
Index: PHPCadesCPExtendedKeyUsage.h
===================================================================
--- PHPCadesCPExtendedKeyUsage.h	(revision 251535)
+++ PHPCadesCPExtendedKeyUsage.h	(working copy)
@@ -5,11 +5,11 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct exku_obj {
-    zend_object zo;
+typedef struct _exku_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPExtendedKeyUsageObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} exku_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers exku_obj_handlers;
@@ -16,13 +16,13 @@
 extern zend_class_entry *exku_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void exku_free_storage(void *object TSRMLS_DC);
+// void exku_free_storage(void *object );
 
 //функция создания хэндлера для нового объекта класса. используется при
 //создании новых объектов
-zend_object_value exku_create_handler(zend_class_entry *type TSRMLS_DC);
+// zend_object_value exku_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void exku_init(TSRMLS_D);
+void exku_init(void);
 #endif
Index: PHPCadesCPHashedData.cpp
===================================================================
--- PHPCadesCPHashedData.cpp	(revision 251535)
+++ PHPCadesCPHashedData.cpp	(working copy)
@@ -3,8 +3,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPHashedData, __construct) {
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesCPHashedDataObject>(
         new CPPCadesCPHashedDataObject());
 }
@@ -11,22 +12,23 @@
 
 PHP_METHOD(CPHashedData, Hash) {
     char *sVal;
-    int lVal;
+    size_t lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &sVal, &lVal) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &sVal, &lVal) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Hash(sVal, lVal));
 }
 
 PHP_METHOD(CPHashedData, SetHashValue) {
     char *sVal;
-    int lVal;
+    size_t lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &sVal, &lVal) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &sVal, &lVal) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -35,8 +37,9 @@
 
     CAtlString Val(sVal, lVal);
 
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_HashValue(Val));
 }
 
@@ -43,11 +46,12 @@
 PHP_METHOD(CPHashedData, get_Key) {
     CAtlString Val;
 
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+            (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Key(Val));
 
-    RETURN_ATL_STRINGL(Val)
+    RETURN_ATL_STRINGL(Val);
 }
 
 PHP_METHOD(CPHashedData, set_Key) {
@@ -55,12 +59,14 @@
     char *Val;
     int len;
 
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &Val, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &Val, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+            (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
+
     sVal = CAtlString(Val);
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Key(sVal));
 }
@@ -68,11 +74,12 @@
 PHP_METHOD(CPHashedData, get_Value) {
     CAtlString Val;
 
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Value(Val));
 
-    RETURN_ATL_STRINGL(Val)
+    RETURN_ATL_STRINGL(Val);
 }
 
 PHP_METHOD(CPHashedData, set_Algorithm) {
@@ -79,14 +86,15 @@
     long lAlgorithm;
     CAPICOM_HASH_ALGORITHM Algorithm;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lAlgorithm) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lAlgorithm) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Algorithm = (CAPICOM_HASH_ALGORITHM)lAlgorithm;
 
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Algorithm(Algorithm));
 }
 
@@ -93,11 +101,12 @@
 PHP_METHOD(CPHashedData, get_Algorithm) {
     CAPICOM_HASH_ALGORITHM Algorithm;
 
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Algorithm(&Algorithm));
 
-    RETURN_LONG(Algorithm)
+    RETURN_LONG(Algorithm);
 }
 
 PHP_METHOD(CPHashedData, set_DataEncoding) {
@@ -104,14 +113,15 @@
     long lType;
     CADESCOM_CONTENT_ENCODING_TYPE Type;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lType) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lType) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Type = (CADESCOM_CONTENT_ENCODING_TYPE)lType;
 
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_DataEncoding(Type));
 }
 
@@ -118,70 +128,91 @@
 PHP_METHOD(CPHashedData, get_DataEncoding) {
     CADESCOM_CONTENT_ENCODING_TYPE type;
 
-    hash_dat_obj *obj =
-        (hash_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    hashed_data_obj *obj =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_DataEncoding(&type));
 
-    RETURN_LONG(type)
+    RETURN_LONG(type);
 }
 
-zend_class_entry *hash_dat_class_entry;
-zend_object_handlers hash_dat_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-zend_function_entry hash_dat_methods[] = {
-    PHP_ME(CPHashedData, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPHashedData, Hash, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPHashedData, SetHashValue, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPHashedData, get_Value, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPHashedData, set_Key, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPHashedData, get_Key, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPHashedData, set_Algorithm, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPHashedData, get_Algorithm, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPHashedData, set_DataEncoding, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPHashedData, get_DataEncoding, NULL, ZEND_ACC_PUBLIC){NULL, NULL,
-                                                                  NULL}};
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_hash, 0, 0, 1)
+ ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
 
-void hash_dat_free_storage(void *object TSRMLS_DC) {
-    hash_dat_obj *obj = (hash_dat_obj *)object;
-    obj->m_pCppCadesImpl.reset();
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_sethashvalue, 0, 0, 1)
+ ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_get_value, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    efree(obj);
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_set_key, 0, 0, 1)
+ ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
 
-zend_object_value hash_dat_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_get_key, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    hash_dat_obj *obj = (hash_dat_obj *)emalloc(sizeof(hash_dat_obj));
-    memset(obj, 0, sizeof(hash_dat_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_set_algorithm, 0, 0, 1)
+ ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_get_algorithm, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle = zend_objects_store_put(obj, NULL, hash_dat_free_storage,
-                                           NULL TSRMLS_CC);
-    retval.handlers = &hash_dat_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_set_dataencoding, 0, 0, 1)
+ ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
 
-    return retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cphasheddata_get_dataencoding, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+zend_class_entry *hashed_data_ce;
+zend_object_handlers hashed_data_obj_handlers;
+
+zend_function_entry hashed_data_methods[] = {
+    PHP_ME(CPHashedData, __construct, arginfo_cphasheddata_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPHashedData, Hash, arginfo_cphasheddata_hash, ZEND_ACC_PUBLIC)
+    PHP_ME(CPHashedData, SetHashValue, arginfo_cphasheddata_sethashvalue, ZEND_ACC_PUBLIC)
+    PHP_ME(CPHashedData, get_Value, arginfo_cphasheddata_get_value, ZEND_ACC_PUBLIC)
+    PHP_ME(CPHashedData, set_Key, arginfo_cphasheddata_set_key, ZEND_ACC_PUBLIC)
+    PHP_ME(CPHashedData, get_Key, arginfo_cphasheddata_get_key, ZEND_ACC_PUBLIC)
+    PHP_ME(CPHashedData, set_Algorithm, arginfo_cphasheddata_set_algorithm, ZEND_ACC_PUBLIC)
+    PHP_ME(CPHashedData, get_Algorithm, arginfo_cphasheddata_get_algorithm, ZEND_ACC_PUBLIC)
+    PHP_ME(CPHashedData, set_DataEncoding, arginfo_cphasheddata_set_dataencoding, ZEND_ACC_PUBLIC)
+    PHP_ME(CPHashedData, get_DataEncoding, arginfo_cphasheddata_get_dataencoding, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
+
+static void hashed_data_free(zend_object *object ) {
+    hashed_data_obj *obj = (hashed_data_obj *)((char *)object - XtOffsetOf(hashed_data_obj, zobj));
+    obj->m_pCppCadesImpl.reset();
+
+    zend_object_std_dtor(object);
 }
 
-void hash_dat_init(TSRMLS_D) {
+static zend_object* hashed_data_create_handler(zend_class_entry *ce ) {
+    hashed_data_obj *obj = (hashed_data_obj *)emalloc(sizeof(hashed_data_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(hashed_data_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &hashed_data_obj_handlers;
+
+    return &obj->zobj;
+}
+
+void hashed_data_init(void) {
     zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce, "CPHashedData", hash_dat_methods);
-    hash_dat_class_entry = zend_register_internal_class(&ce TSRMLS_CC);
-    hash_dat_class_entry->create_object = hash_dat_create_handler;
-    memcpy(&hash_dat_handlers, zend_get_std_object_handlers(),
+    INIT_CLASS_ENTRY(ce, "CPHashedData", hashed_data_methods);
+    hashed_data_ce = zend_register_internal_class(&ce );
+    hashed_data_ce->create_object = hashed_data_create_handler;
+    memcpy(&hashed_data_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    hash_dat_handlers.clone_obj = NULL;
+    hashed_data_obj_handlers.clone_obj = NULL;
+    hashed_data_obj_handlers.free_obj = hashed_data_free;
+    hashed_data_obj_handlers.offset = XtOffsetOf(hashed_data_obj, zobj);
 }
Index: PHPCadesCPHashedData.h
===================================================================
--- PHPCadesCPHashedData.h	(revision 251535)
+++ PHPCadesCPHashedData.h	(working copy)
@@ -5,21 +5,21 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct hash_dat_obj {
-    zend_object zo;
+typedef struct hashed_data_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPHashedDataObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} hashed_data_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
-extern zend_class_entry *hash_dat_class_entry;
-extern zend_object_handlers hash_dat_handlers;
+extern zend_class_entry *hashed_data_ce;
+extern zend_object_handlers hashed_data_obj_handlers;
 
-void hash_dat_free_storage(void *object TSRMLS_DC);
-zend_object_value hash_dat_create_handler(zend_class_entry *type TSRMLS_DC);
+// void hashed_data_free_storage(void *object );
+// zend_object_value hashed_data_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void hash_dat_init(TSRMLS_D);
+void hashed_data_init(void);
 
 #endif
Index: PHPCadesCPKeyUsage.cpp
===================================================================
--- PHPCadesCPKeyUsage.cpp	(revision 251535)
+++ PHPCadesCPKeyUsage.cpp	(working copy)
@@ -3,7 +3,8 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPKeyUsage, __construct) {
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesCPKeyUsageObject>(
         new CPPCadesCPKeyUsageObject());
 }
@@ -11,13 +12,14 @@
 PHP_METHOD(CPKeyUsage, get_IsPresent) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsPresent(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -24,13 +26,14 @@
 PHP_METHOD(CPKeyUsage, get_IsCritical) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsCritical(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -37,14 +40,15 @@
 PHP_METHOD(CPKeyUsage, get_IsDigitalSignatureEnabled) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_IsDigitalSignatureEnabled(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -51,14 +55,15 @@
 PHP_METHOD(CPKeyUsage, get_IsNonRepudiationEnabled) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_IsNonRepudiationEnabled(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -65,14 +70,15 @@
 PHP_METHOD(CPKeyUsage, get_IsKeyEnciphermentEnabled) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_IsKeyEnciphermentEnabled(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -79,14 +85,15 @@
 PHP_METHOD(CPKeyUsage, get_IsDataEnciphermentEnabled) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_IsDataEnciphermentEnabled(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -93,13 +100,14 @@
 PHP_METHOD(CPKeyUsage, get_IsKeyAgreementEnabled) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsKeyAgreementEnabled(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -106,13 +114,14 @@
 PHP_METHOD(CPKeyUsage, get_IsKeyCertSignEnabled) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsKeyCertSignEnabled(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -119,13 +128,14 @@
 PHP_METHOD(CPKeyUsage, get_IsCRLSignEnabled) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsCRLSignEnabled(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -132,13 +142,14 @@
 PHP_METHOD(CPKeyUsage, get_IsEncipherOnlyEnabled) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsEncipherOnlyEnabled(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -145,13 +156,14 @@
 PHP_METHOD(CPKeyUsage, get_IsDecipherOnlyEnabled) {
     BOOL val;
 
-    ku_obj *obj = (ku_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    ku_obj *obj = (ku_obj *)((char *)zobj - XtOffsetOf(ku_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IsDecipherOnlyEnabled(&val));
     if (val) {
-        RETURN_TRUE
+        RETURN_TRUE;
     } else {
-        RETURN_FALSE
+        RETURN_FALSE;
     }
 }
 
@@ -158,63 +170,84 @@
 zend_object_handlers ku_obj_handlers;
 zend_class_entry *ku_ce;
 
-void ku_free_storage(void *object TSRMLS_DC) {
-    ku_obj *obj = (ku_obj *)object;
+static void ku_free (zend_object *object ) {
+    ku_obj *obj = (ku_obj *)((char *)object - XtOffsetOf(ku_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* ku_create_handler(zend_class_entry *ce ) {
+    ku_obj *obj = (ku_obj *)emalloc(sizeof(ku_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(ku_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &ku_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value ku_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ku_obj *obj = (ku_obj *)emalloc(sizeof(ku_obj));
-    memset(obj, 0, sizeof(ku_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_ispresent, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_iscritical, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, ku_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &ku_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_isdigitalsignatureenabled, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_isnonrepudationenabled, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_iskeyenciphermentenabled, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_isdataenciphermentenabled, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_iskeyagreementenabled, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_iskeycertsignenabled, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_iscrlcertsignenabled, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_isencipheronlyenabled, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpkeyusage_get_isdecipheronlyenabled, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
 //связывание методов класса в function entry
 zend_function_entry ku_methods[] = {
-    PHP_ME(CPKeyUsage, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPKeyUsage, get_IsPresent, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsCritical, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsDigitalSignatureEnabled, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsNonRepudiationEnabled, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsKeyEnciphermentEnabled, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsDataEnciphermentEnabled, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsKeyAgreementEnabled, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsKeyCertSignEnabled, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsCRLSignEnabled, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsEncipherOnlyEnabled, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPKeyUsage, get_IsDecipherOnlyEnabled, NULL,
-           ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPKeyUsage, __construct, arginfo_cpkeyusage_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPKeyUsage, get_IsPresent, arginfo_cpkeyusage_get_ispresent, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsCritical, arginfo_cpkeyusage_get_iscritical, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsDigitalSignatureEnabled, arginfo_cpkeyusage_get_isdigitalsignatureenabled, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsNonRepudiationEnabled, arginfo_cpkeyusage_get_isnonrepudationenabled, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsKeyEnciphermentEnabled, arginfo_cpkeyusage_get_iskeyenciphermentenabled, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsDataEnciphermentEnabled, arginfo_cpkeyusage_get_isdataenciphermentenabled, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsKeyAgreementEnabled, arginfo_cpkeyusage_get_iskeyagreementenabled, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsKeyCertSignEnabled, arginfo_cpkeyusage_get_iskeycertsignenabled, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsCRLSignEnabled, arginfo_cpkeyusage_get_iscrlcertsignenabled, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsEncipherOnlyEnabled, arginfo_cpkeyusage_get_isencipheronlyenabled, ZEND_ACC_PUBLIC)
+    PHP_ME(CPKeyUsage, get_IsDecipherOnlyEnabled, arginfo_cpkeyusage_get_isdecipheronlyenabled, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void ku_init(TSRMLS_D) {
+void ku_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPKeyUsage", ku_methods);
-    ku_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    ku_ce = zend_register_internal_class(&ce );
     ku_ce->create_object = ku_create_handler;
     memcpy(&ku_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     ku_obj_handlers.clone_obj = NULL;
+    ku_obj_handlers.free_obj = ku_free;
+    ku_obj_handlers.offset = XtOffsetOf(ku_obj, zobj);
 }
Index: PHPCadesCPKeyUsage.h
===================================================================
--- PHPCadesCPKeyUsage.h	(revision 251535)
+++ PHPCadesCPKeyUsage.h	(working copy)
@@ -5,10 +5,10 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct ku_obj {
-    zend_object zo;
+typedef struct _ku_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPKeyUsageObject> m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} ku_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers ku_obj_handlers;
@@ -15,13 +15,13 @@
 extern zend_class_entry *ku_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void ku_free_storage(void *object TSRMLS_DC);
+// void ku_free_storage(void *object );
 
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value ku_create_handler(zend_class_entry *type TSRMLS_DC);
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value ku_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void ku_init(TSRMLS_D);
+void ku_init(void);
 #endif
Index: PHPCadesCPOID.cpp
===================================================================
--- PHPCadesCPOID.cpp	(revision 251535)
+++ PHPCadesCPOID.cpp	(working copy)
@@ -3,7 +3,8 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPOID, __construct) {
-    oid_obj *obj = (oid_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    oid_obj *obj = (oid_obj *)((char *)zobj - XtOffsetOf(oid_obj, zobj));
     obj->m_pCppCadesImpl =
         boost::shared_ptr<CPPCadesCPOIDObject>(new CPPCadesCPOIDObject());
 }
@@ -11,7 +12,8 @@
 PHP_METHOD(CPOID, get_Value) {
     boost::shared_ptr<CAtlStringA> atl;
 
-    oid_obj *obj = (oid_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    oid_obj *obj = (oid_obj *)((char *)zobj - XtOffsetOf(oid_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Value(atl));
 
@@ -20,11 +22,12 @@
 
 PHP_METHOD(CPOID, set_Value) {
     char *str;
-    int len;
+    size_t len;
 
-    oid_obj *obj = (oid_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    oid_obj *obj = (oid_obj *)((char *)zobj - XtOffsetOf(oid_obj, zobj));
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -34,7 +37,8 @@
 PHP_METHOD(CPOID, get_FriendlyName) {
     CAtlString atlstr;
 
-    oid_obj *obj = (oid_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    oid_obj *obj = (oid_obj *)((char *)zobj - XtOffsetOf(oid_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_FriendlyName(atlstr));
 
@@ -44,54 +48,53 @@
 zend_object_handlers oid_obj_handlers;
 zend_class_entry *oid_ce;
 
-void oid_free_storage(void *object TSRMLS_DC) {
-    oid_obj *obj = (oid_obj *)object;
+static void oid_free(zend_object *object ) {
+    oid_obj *obj = (oid_obj *)((char *)object - XtOffsetOf(oid_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* oid_create_handler(zend_class_entry *ce ) {
+    oid_obj *obj = (oid_obj *)emalloc(sizeof(oid_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(oid_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &oid_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value oid_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpoid_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    oid_obj *obj = (oid_obj *)emalloc(sizeof(oid_obj));
-    memset(obj, 0, sizeof(oid_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpoid_get_value, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpoid_set_value, 0, 0, 1)
+ ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, oid_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &oid_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpoid_get_friendlyname, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
-
-//связывание методов класса в function entry
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry oid_methods[] = {
-    PHP_ME(CPOID, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPOID, get_Value, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPOID, set_Value, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPOID, get_FriendlyName, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPOID, __construct, arginfo_cpoid_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPOID, get_Value, arginfo_cpoid_get_value, ZEND_ACC_PUBLIC)
+    PHP_ME(CPOID, set_Value, arginfo_cpoid_set_value, ZEND_ACC_PUBLIC)
+    PHP_ME(CPOID, get_FriendlyName, arginfo_cpoid_get_friendlyname, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void oid_init(TSRMLS_D) {
+void oid_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPOID", oid_methods);
-    oid_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    oid_ce = zend_register_internal_class(&ce );
     oid_ce->create_object = oid_create_handler;
     memcpy(&oid_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     oid_obj_handlers.clone_obj = NULL;
+    oid_obj_handlers.free_obj = oid_free;
+    oid_obj_handlers.offset = XtOffsetOf(oid_obj, zobj);
 }
Index: PHPCadesCPOID.h
===================================================================
--- PHPCadesCPOID.h	(revision 251535)
+++ PHPCadesCPOID.h	(working copy)
@@ -5,10 +5,10 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct oid_obj {
-    zend_object zo;
+typedef struct _oid_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPOIDObject> m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} oid_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers oid_obj_handlers;
@@ -15,12 +15,12 @@
 extern zend_class_entry *oid_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void oid_free_storage(void *object TSRMLS_DC);
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value oid_create_handler(zend_class_entry *type TSRMLS_DC);
+// void oid_free_storage(void *object );
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value oid_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void oid_init(TSRMLS_D);
+void oid_init(void);
 #endif
Index: PHPCadesCPPrivateKey.cpp
===================================================================
--- PHPCadesCPPrivateKey.cpp	(revision 251535)
+++ PHPCadesCPPrivateKey.cpp	(working copy)
@@ -4,8 +4,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPPrivateKey, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     private_key_obj *obj =
-        (private_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (private_key_obj *)((char *)zobj - XtOffsetOf(private_key_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesCPPrivateKeyObject>(
         new CPPCadesCPPrivateKeyObject());
 }
@@ -13,114 +14,122 @@
 PHP_METHOD(CPPrivateKey, get_ContainerName) {
     CAtlString atlstr;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     private_key_obj *obj =
-        (private_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (private_key_obj *)((char *)zobj - XtOffsetOf(private_key_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_ContainerName(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPPrivateKey, get_UniqueContainerName) {
     CAtlString atlstr;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     private_key_obj *obj =
-        (private_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (private_key_obj *)((char *)zobj - XtOffsetOf(private_key_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_UniqueContainerName(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPPrivateKey, get_ProviderName) {
     CAtlString atlstr;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     private_key_obj *obj =
-        (private_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (private_key_obj *)((char *)zobj - XtOffsetOf(private_key_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_ProviderName(atlstr));
 
-    RETURN_ATL_STRING(atlstr)
+    RETURN_ATL_STRING(atlstr);
 }
 
 PHP_METHOD(CPPrivateKey, get_ProviderType) {
     CAPICOM_PROV_TYPE type;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     private_key_obj *obj =
-        (private_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (private_key_obj *)((char *)zobj - XtOffsetOf(private_key_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_ProviderType(&type));
 
-    RETURN_LONG(type)
+    RETURN_LONG(type);
 }
 
 PHP_METHOD(CPPrivateKey, get_KeySpec) {
     CAPICOM_KEY_SPEC spec;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     private_key_obj *obj =
-        (private_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (private_key_obj *)((char *)zobj - XtOffsetOf(private_key_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_KeySpec(&spec));
 
-    RETURN_LONG(spec)
+    RETURN_LONG(spec);
 }
 
 zend_object_handlers private_key_obj_handlers;
 zend_class_entry *private_key_ce;
 
-void private_key_free_storage(void *object TSRMLS_DC) {
-    private_key_obj *obj = (private_key_obj *)object;
+static void private_key_free(zend_object *object) {
+    private_key_obj *obj = (private_key_obj *)((char *)object - XtOffsetOf(private_key_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* private_key_create_handler(zend_class_entry *ce) {
+    private_key_obj *obj = (private_key_obj *)emalloc(sizeof(private_key_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(private_key_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &private_key_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value private_key_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpprivatekey_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    private_key_obj *obj = (private_key_obj *)emalloc(sizeof(private_key_obj));
-    memset(obj, 0, sizeof(private_key_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpprivatekey_get_containername, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpprivatekey_get_uniquecontainername, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle = zend_objects_store_put(obj, NULL, private_key_free_storage,
-                                           NULL TSRMLS_CC);
-    retval.handlers = &private_key_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpprivatekey_get_providername, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpprivatekey_get_providertype, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpprivatekey_get_keyspec, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry private_key_methods[] = {
-    PHP_ME(CPPrivateKey, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPPrivateKey, get_ContainerName, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPPrivateKey, get_UniqueContainerName, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPPrivateKey, get_ProviderName, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPPrivateKey, get_ProviderType, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPPrivateKey, get_KeySpec, NULL, ZEND_ACC_PUBLIC)
+    PHP_ME(CPPrivateKey, __construct, arginfo_cpprivatekey_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPPrivateKey, get_ContainerName, arginfo_cpprivatekey_get_containername, ZEND_ACC_PUBLIC)
+    PHP_ME(CPPrivateKey, get_UniqueContainerName, arginfo_cpprivatekey_get_uniquecontainername, ZEND_ACC_PUBLIC)
+    PHP_ME(CPPrivateKey, get_ProviderName, arginfo_cpprivatekey_get_providername, ZEND_ACC_PUBLIC)
+    PHP_ME(CPPrivateKey, get_ProviderType, arginfo_cpprivatekey_get_providertype, ZEND_ACC_PUBLIC)
+    PHP_ME(CPPrivateKey, get_KeySpec, arginfo_cpprivatekey_get_keyspec, ZEND_ACC_PUBLIC)
     // PHP_ME(CPPrivateKey, get_UECardholderData,    NULL, ZEND_ACC_PUBLIC)
     // PHP_ME(CPPrivateKey, get_UECardWelcomeText,   NULL, ZEND_ACC_PUBLIC)
     {NULL, NULL, NULL}};
 
-void private_key_init(TSRMLS_D) {
+void private_key_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPPrivateKey", private_key_methods);
-    private_key_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    private_key_ce = zend_register_internal_class(&ce );
     private_key_ce->create_object = private_key_create_handler;
     memcpy(&private_key_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     private_key_obj_handlers.clone_obj = NULL;
+    private_key_obj_handlers.free_obj = private_key_free;
+    private_key_obj_handlers.offset = XtOffsetOf(private_key_obj, zobj);
 }
Index: PHPCadesCPPrivateKey.h
===================================================================
--- PHPCadesCPPrivateKey.h	(revision 251535)
+++ PHPCadesCPPrivateKey.h	(working copy)
@@ -5,23 +5,23 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct private_key_obj {
-    zend_object zo;
+typedef struct _private_key_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPPrivateKeyObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} private_key_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers private_key_obj_handlers;
 extern zend_class_entry *private_key_ce;
 
-//функция освобождения памяти. используется при уничтожении объектов
-void private_key_free_storage(void *object TSRMLS_DC);
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value private_key_create_handler(zend_class_entry *type TSRMLS_DC);
+// //функция освобождения памяти. используется при уничтожении объектов
+// void private_key_free_storage(void *object );
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value private_key_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void private_key_init(TSRMLS_D);
+void private_key_init(void);
 #endif
Index: PHPCadesCPPublicKey.cpp
===================================================================
--- PHPCadesCPPublicKey.cpp	(revision 251535)
+++ PHPCadesCPPublicKey.cpp	(working copy)
@@ -5,19 +5,22 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPPublicKey, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     public_key_obj *obj =
-        (public_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (public_key_obj *)((char *)zobj - XtOffsetOf(public_key_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesCPPublicKeyObject>(
         new CPPCadesCPPublicKeyObject());
 }
 
 PHP_METHOD(CPPublicKey, get_Algorithm) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     public_key_obj *obj =
-        (public_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (public_key_obj *)((char *)zobj - XtOffsetOf(public_key_obj, zobj));
 
     object_init_ex(return_value, oid_ce);
+    zobj = Z_OBJ_P(return_value);
     oid_obj *oobj =
-        (oid_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (oid_obj *)((char *)zobj - XtOffsetOf(oid_obj, zobj));
     oobj->m_pCppCadesImpl =
         boost::shared_ptr<CPPCadesCPOIDObject>(new CPPCadesCPOIDObject());
 
@@ -28,20 +31,22 @@
 PHP_METHOD(CPPublicKey, get_Length) {
     DWORD len;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     public_key_obj *obj =
-        (public_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (public_key_obj *)((char *)zobj - XtOffsetOf(public_key_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Length(&len));
 
-    RETURN_LONG(len)
+    RETURN_LONG(len);
 }
 
 PHP_METHOD(CPPublicKey, get_EncodedKey) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     public_key_obj *obj =
-        (public_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (public_key_obj *)((char *)zobj - XtOffsetOf(public_key_obj, zobj));
 
     object_init_ex(return_value, encoded_data_ce);
-    encoded_data_obj *dobj = (encoded_data_obj *)zend_object_store_get_object(
-        return_value TSRMLS_CC);
+    zobj = Z_OBJ_P(return_value);
+    encoded_data_obj *dobj = (encoded_data_obj *)((char *)zobj - XtOffsetOf(encoded_data_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_EncodedKey(dobj->m_pCppCadesImpl));
@@ -48,13 +53,15 @@
 }
 
 PHP_METHOD(CPPublicKey, get_EncodedParameters) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     public_key_obj *obj =
-        (public_key_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (public_key_obj *)((char *)zobj - XtOffsetOf(public_key_obj, zobj));
 
     object_init_ex(return_value, encoded_data_ce);
-    encoded_data_obj *dobj = (encoded_data_obj *)zend_object_store_get_object(
-        return_value TSRMLS_CC);
+    zobj = Z_OBJ_P(return_value);
+    encoded_data_obj *dobj = (encoded_data_obj *)((char *)zobj - XtOffsetOf(encoded_data_obj, zobj));
 
+
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_EncodedParameters(dobj->m_pCppCadesImpl));
 }
@@ -62,56 +69,56 @@
 zend_object_handlers public_key_obj_handlers;
 zend_class_entry *public_key_ce;
 
-void public_key_free_storage(void *object TSRMLS_DC) {
-    public_key_obj *obj = (public_key_obj *)object;
+static void public_key_free(zend_object *object ) {
+    public_key_obj *obj = (public_key_obj *)((char *)object - XtOffsetOf(public_key_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* public_key_create_handler(zend_class_entry *ce ) {
+    public_key_obj *obj = (public_key_obj *)emalloc(sizeof(public_key_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(public_key_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &public_key_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value public_key_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cppublickey_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    public_key_obj *obj = (public_key_obj *)emalloc(sizeof(public_key_obj));
-    memset(obj, 0, sizeof(public_key_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cppublickey_get_algorithm, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cppublickey_get_length, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle = zend_objects_store_put(obj, NULL, public_key_free_storage,
-                                           NULL TSRMLS_CC);
-    retval.handlers = &public_key_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cppublickey_get_encodedkey, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cppublickey_get_encodedparameters, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry public_key_methods[] = {
-    PHP_ME(CPPublicKey, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPPublicKey, get_Algorithm, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPPublicKey, get_Length, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPPublicKey, get_EncodedKey, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPPublicKey, get_EncodedParameters, NULL,
-           ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPPublicKey, __construct, arginfo_cppublickey_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPPublicKey, get_Algorithm, arginfo_cppublickey_get_algorithm, ZEND_ACC_PUBLIC)
+    PHP_ME(CPPublicKey, get_Length, arginfo_cppublickey_get_length, ZEND_ACC_PUBLIC)
+    PHP_ME(CPPublicKey, get_EncodedKey, arginfo_cppublickey_get_encodedkey, ZEND_ACC_PUBLIC)
+    PHP_ME(CPPublicKey, get_EncodedParameters, arginfo_cppublickey_get_encodedparameters, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void public_key_init(TSRMLS_D) {
+void public_key_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPPublicKey", public_key_methods);
-    public_key_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    public_key_ce = zend_register_internal_class(&ce );
     public_key_ce->create_object = public_key_create_handler;
     memcpy(&public_key_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     public_key_obj_handlers.clone_obj = NULL;
+    public_key_obj_handlers.free_obj = public_key_free;
+    public_key_obj_handlers.offset = XtOffsetOf(public_key_obj, zobj);
 }
Index: PHPCadesCPPublicKey.h
===================================================================
--- PHPCadesCPPublicKey.h	(revision 251535)
+++ PHPCadesCPPublicKey.h	(working copy)
@@ -5,11 +5,11 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct public_key_obj {
-    zend_object zo;
+typedef struct _public_key_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPPublicKeyObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} public_key_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers public_key_obj_handlers;
@@ -16,12 +16,12 @@
 extern zend_class_entry *public_key_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void public_key_free_storage(void *object TSRMLS_DC);
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value public_key_create_handler(zend_class_entry *type TSRMLS_DC);
+// void public_key_free_storage(void *object );
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value public_key_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void public_key_init(TSRMLS_D);
+void public_key_init(void);
 #endif
Index: PHPCadesCPRawSignature.cpp
===================================================================
--- PHPCadesCPRawSignature.cpp	(revision 251535)
+++ PHPCadesCPRawSignature.cpp	(working copy)
@@ -5,8 +5,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPRawSignature, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     raw_sig_obj *obj =
-        (raw_sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (raw_sig_obj *)((char *)zobj - XtOffsetOf(raw_sig_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesRawSignatureObject>(
         new CPPCadesRawSignatureObject());
 }
@@ -14,23 +15,27 @@
 PHP_METHOD(CPRawSignature, VerifyHash) {
     zval *zHashedData;
     char *sVal;
-    int lVal;
+    size_t lVal;
     zval *zCert;
     CCertContext Context;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "OsO", &zHashedData,
-                              hash_dat_class_entry, &sVal, &lVal, &zCert,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "OsO", &zHashedData,
+                              hashed_data_ce, &sVal, &lVal, &zCert,
                               cert_ce) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    hash_dat_obj *pHashedData =
-        (hash_dat_obj *)zend_object_store_get_object(zHashedData TSRMLS_CC);
-    cert_obj *pCert = (cert_obj *)zend_object_store_get_object(zCert TSRMLS_CC);
     CAtlString Val(sVal, lVal);
-
+    zend_object *zobj = Z_OBJ_P(getThis());
     raw_sig_obj *obj =
-        (raw_sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (raw_sig_obj *)((char *)zobj - XtOffsetOf(raw_sig_obj, zobj));
 
+    zobj = Z_OBJ_P(zHashedData);
+    hashed_data_obj *pHashedData =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
+
+    zobj = Z_OBJ_P(zCert);    
+    certificate_obj *pCert = (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->VerifyHash(
         pHashedData->m_pCppCadesImpl, Val, pCert->m_pCppCadesImpl));
 }
@@ -40,70 +45,75 @@
     zval *zCert;
     CAtlString Val;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "OO", &zHashedData,
-                              hash_dat_class_entry, &zCert, cert_ce) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "OO", &zHashedData,
+                              hashed_data_ce, &zCert, cert_ce) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    hash_dat_obj *pHashedData =
-        (hash_dat_obj *)zend_object_store_get_object(zHashedData TSRMLS_CC);
-    cert_obj *pCert = (cert_obj *)zend_object_store_get_object(zCert TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    raw_sig_obj *obj =
+        (raw_sig_obj *)((char *)zobj - XtOffsetOf(raw_sig_obj, zobj));
 
-    raw_sig_obj *obj =
-        (raw_sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zobj = Z_OBJ_P(zHashedData);
+    hashed_data_obj *pHashedData =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
+
+    zobj = Z_OBJ_P(zCert);    
+    certificate_obj *pCert = (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
+
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->SignHash(
         pHashedData->m_pCppCadesImpl, pCert->m_pCppCadesImpl, Val));
     RETURN_ATL_STRINGL(Val)
 }
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cprawsignature_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cprawsignature_verifyhash, 0, 0, 3)
+ ZEND_ARG_INFO(0, hasheddata)
+ ZEND_ARG_INFO(0, hashvalue)
+ ZEND_ARG_INFO(0, certificate)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cprawsignature_signhash, 0, 0, 2)
+ ZEND_ARG_INFO(0, hasheddata)
+ ZEND_ARG_INFO(0, certificate)
+ZEND_END_ARG_INFO()
+
 zend_function_entry raw_sig_methods[] = {
-    PHP_ME(CPRawSignature, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPRawSignature, VerifyHash, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPRawSignature, SignHash, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPRawSignature, __construct, arginfo_cprawsignature_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPRawSignature, VerifyHash, arginfo_cprawsignature_verifyhash, ZEND_ACC_PUBLIC)
+    PHP_ME(CPRawSignature, SignHash, arginfo_cprawsignature_signhash, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
 
-zend_class_entry *raw_sig_class_entry;
-zend_object_handlers raw_sig_handlers;
+zend_class_entry *raw_sig_ce;
+zend_object_handlers raw_sig_obj_handlers;
 
-void raw_sig_free_storage(void *object TSRMLS_DC) {
-    raw_sig_obj *obj = (raw_sig_obj *)object;
+static void raw_sig_free(zend_object *object ) {
+    raw_sig_obj *obj = (raw_sig_obj *)((char *)object - XtOffsetOf(raw_sig_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
-
-    efree(obj);
+    zend_object_std_dtor(object);
 }
 
-zend_object_value raw_sig_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+static zend_object* raw_sig_create_handler(zend_class_entry *ce ) {
+    raw_sig_obj *obj = (raw_sig_obj *)emalloc(sizeof(raw_sig_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(raw_sig_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &raw_sig_obj_handlers;
 
-    raw_sig_obj *obj = (raw_sig_obj *)emalloc(sizeof(raw_sig_obj));
-    memset(obj, 0, sizeof(raw_sig_obj));
-    obj->zo.ce = type;
-
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
-
-    retval.handle =
-        zend_objects_store_put(obj, NULL, raw_sig_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &raw_sig_handlers;
-
-    return retval;
+    return &obj->zobj;
 }
 
-void raw_sig_init(TSRMLS_D) {
+void raw_sig_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPRawSignature", raw_sig_methods);
-    raw_sig_class_entry = zend_register_internal_class(&ce TSRMLS_CC);
-    raw_sig_class_entry->create_object = raw_sig_create_handler;
-    memcpy(&raw_sig_handlers, zend_get_std_object_handlers(),
+    raw_sig_ce = zend_register_internal_class(&ce );
+    raw_sig_ce->create_object = raw_sig_create_handler;
+    memcpy(&raw_sig_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    raw_sig_handlers.clone_obj = NULL;
+    raw_sig_obj_handlers.clone_obj = NULL;
+    raw_sig_obj_handlers.free_obj = raw_sig_free;
+    raw_sig_obj_handlers.offset = XtOffsetOf(raw_sig_obj, zobj);
 }
Index: PHPCadesCPRawSignature.h
===================================================================
--- PHPCadesCPRawSignature.h	(revision 251535)
+++ PHPCadesCPRawSignature.h	(working copy)
@@ -5,21 +5,21 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct raw_sig_obj {
-    zend_object zo;
+typedef struct _raw_sig_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesRawSignatureObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} raw_sig_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
-extern zend_class_entry *raw_sig_class_entry;
-extern zend_object_handlers raw_sig_handlers;
+extern zend_class_entry *raw_sig_ce;
+extern zend_object_handlers raw_sig_obj_handlers;
 
-void raw_sig_free_storage(void *object TSRMLS_DC);
-zend_object_value raw_sig_create_handler(zend_class_entry *type TSRMLS_DC);
+// void raw_sig_free_storage(void *object );
+// zend_object_value raw_sig_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void raw_sig_init(TSRMLS_D);
+void raw_sig_init(void);
 
 #endif
Index: PHPCadesCPRecipients.cpp
===================================================================
--- PHPCadesCPRecipients.cpp	(revision 251535)
+++ PHPCadesCPRecipients.cpp	(working copy)
@@ -4,53 +4,59 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPRecipients, Add) {
-    zval *php_var;
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "O", &php_var,
+    zval *recipients_zval;
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "O", &recipients_zval,
                               cert_ce) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     recipients_obj *obj =
-        (recipients_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (recipients_obj *)((char *)zobj - XtOffsetOf(recipients_obj, zobj));
 
-    cert_obj *Recipient =
-        (cert_obj *)zend_object_store_get_object(php_var TSRMLS_CC);
+    zobj = Z_OBJ_P(recipients_zval);
+    certificate_obj *Recipient =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Add(Recipient->m_pCppCadesImpl));
 }
 
-//ядро метода, которое будет работать на самом деле
+//СЏРґСЂРѕ РјРµС‚РѕРґР°, РєРѕС‚РѕСЂРѕРµ Р±СѓРґРµС‚ СЂР°Р±РѕС‚Р°С‚СЊ РЅР° СЃР°РјРѕРј РґРµР»Рµ
 PHP_METHOD(CPRecipients, get_Count) {
     unsigned int value;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     recipients_obj *obj =
-        (recipients_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (recipients_obj *)((char *)zobj - XtOffsetOf(recipients_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Count(&value));
 
-    RETURN_LONG(value)
+    RETURN_LONG(value);
 }
 
-//ядро метода, которое будет работать на самом деле
+//СЏРґСЂРѕ РјРµС‚РѕРґР°, РєРѕС‚РѕСЂРѕРµ Р±СѓРґРµС‚ СЂР°Р±РѕС‚Р°С‚СЊ РЅР° СЃР°РјРѕРј РґРµР»Рµ
 PHP_METHOD(CPRecipients, get_Item) {
     long index;
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &index) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &index) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     recipients_obj *obj =
-        (recipients_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (recipients_obj *)((char *)zobj - XtOffsetOf(recipients_obj, zobj));
 
     boost::shared_ptr<CPPCadesCPCertificateObject> pVal;
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Item(index, pVal));
 
     object_init_ex(return_value, cert_ce);
-    cert_obj *Recipient =
-        (cert_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+    zobj = Z_OBJ_P(return_value);
+    certificate_obj *Recipient =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
     Recipient->m_pCppCadesImpl = pVal;
 }
 
 PHP_METHOD(CPRecipients, Clear) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     recipients_obj *obj =
-        (recipients_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (recipients_obj *)((char *)zobj - XtOffsetOf(recipients_obj, zobj));
     obj->m_pCppCadesImpl->Clear();
 }
 
@@ -57,66 +63,66 @@
 PHP_METHOD(CPRecipients, Remove) {
     long index;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &index) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &index) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     recipients_obj *obj =
-        (recipients_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (recipients_obj *)((char *)zobj - XtOffsetOf(recipients_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Remove(index));
 }
 
-zend_class_entry *recipients_class_entry;
-zend_object_handlers recipients_handlers;
+zend_class_entry *recipients_ce;
+zend_object_handlers recipients_obj_handlers;
 
-void recipients_free_storage(void *object TSRMLS_DC) {
-    recipients_obj *obj = (recipients_obj *)object;
+static void recipients_free(zend_object *object ) {
+    recipients_obj *obj = (recipients_obj *)((char *)object - XtOffsetOf(recipients_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
-
-    efree(obj);
+    zend_object_std_dtor(object);
 }
 
-zend_function_entry recipients_methods[] = {
-    PHP_ME(CPRecipients, Add, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPRecipients, get_Count, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPRecipients, get_Item, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPRecipients, Clear, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cprecipients_add, 0, 0, 1)
+ ZEND_ARG_INFO(0, item)
+ZEND_END_ARG_INFO()
 
-zend_object_value recipients_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cprecipients_get_count, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    recipients_obj *obj = (recipients_obj *)emalloc(sizeof(recipients_obj));
-    memset(obj, 0, sizeof(recipients_obj));
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cprecipients_get_item, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cprecipients_clear, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
-    retval.handle = zend_objects_store_put(obj, NULL, recipients_free_storage,
-                                           NULL TSRMLS_CC);
-    retval.handlers = &recipients_handlers;
+zend_function_entry recipients_methods[] = {
+    PHP_ME(CPRecipients, Add, arginfo_cprecipients_add, ZEND_ACC_PUBLIC)
+    PHP_ME(CPRecipients, get_Count, arginfo_cprecipients_get_count, ZEND_ACC_PUBLIC)
+    PHP_ME(CPRecipients, get_Item, arginfo_cprecipients_get_item, ZEND_ACC_PUBLIC)
+    PHP_ME(CPRecipients, Clear, arginfo_cprecipients_clear, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-    return retval;
+static zend_object* recipients_create_handler(zend_class_entry *ce ) {
+    recipients_obj *obj = (recipients_obj *)emalloc(sizeof(recipients_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(recipients_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &recipients_obj_handlers;
+
+    return &obj->zobj;
 }
 
-void recipients_init(TSRMLS_D) {
+void recipients_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPRecipients", recipients_methods);
-    recipients_class_entry = zend_register_internal_class(&ce TSRMLS_CC);
-    recipients_class_entry->create_object = recipients_create_handler;
-    memcpy(&recipients_handlers, zend_get_std_object_handlers(),
+    recipients_ce = zend_register_internal_class(&ce );
+    recipients_ce->create_object = recipients_create_handler;
+    memcpy(&recipients_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    recipients_handlers.clone_obj = NULL;
+    recipients_obj_handlers.clone_obj = NULL;
+    recipients_obj_handlers.free_obj = recipients_free;
+    recipients_obj_handlers.offset = XtOffsetOf(recipients_obj, zobj);
 }
Index: PHPCadesCPRecipients.h
===================================================================
--- PHPCadesCPRecipients.h	(revision 251535)
+++ PHPCadesCPRecipients.h	(working copy)
@@ -5,20 +5,20 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct recipients_obj {
-    zend_object zo;
+typedef struct _recipients_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPRecipientsObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} recipients_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
-extern zend_class_entry *recipients_class_entry;
-extern zend_object_handlers recipients_handlers;
+extern zend_class_entry *recipients_ce;
+extern zend_object_handlers recipients_obj_handlers;
 
-void recipients_free_storage(void *object TSRMLS_DC);
-zend_object_value recipients_create_handler(zend_class_entry *type TSRMLS_DC);
+// void recipients_free_storage(void *object );
+// zend_object_value recipients_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void recipients_init(TSRMLS_D);
+void recipients_init(void);
 #endif
Index: PHPCadesCPSignedData.cpp
===================================================================
--- PHPCadesCPSignedData.cpp	(revision 251535)
+++ PHPCadesCPSignedData.cpp	(working copy)
@@ -7,8 +7,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPSignedData, __construct) {
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
     obj->m_pCppCadesImpl = new CPPCadesSignedDataObject();
 }
 
@@ -25,8 +26,8 @@
     char *sVal;
     int lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "Olll", &zSigner,
-                              sig_ce, &lCadesType, &lDetached,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "Olll", &zSigner,
+                              signer_ce, &lCadesType, &lDetached,
                               &lEncodingType) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -34,11 +35,14 @@
     Detached = (BOOL)lDetached;
     EncodingType = (CAPICOM_ENCODING_TYPE)lEncodingType;
 
-    sig_obj *pSigner =
-        (sig_obj *)zend_object_store_get_object(zSigner TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zobj = Z_OBJ_P(zSigner);
+    signer_obj *pSigner =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->SignCades(
         pSigner->m_pCppCadesImpl, CadesType, Detached, EncodingType, &bVal));
 
@@ -46,7 +50,7 @@
     sVal = (char *)ecalloc(lVal, sizeof(char));
     memcpy(sVal, bVal.pbData(), lVal);
 
-    RETURN_STRINGL(sVal, lVal, 0)
+    RETURN_STRINGL(sVal, lVal);
 }
 
 PHP_METHOD(CPSignedData, SignHash) {
@@ -61,21 +65,27 @@
     char *sVal;
     int lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "OOll", &zHashedData,
-                              hash_dat_class_entry, &zSigner, sig_ce,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "OOll", &zHashedData,
+                              hashed_data_ce, &zSigner, signer_ce,
                               &lCadesType, &lEncodingType) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     CadesType = (CADESCOM_CADES_TYPE)lCadesType;
     EncodingType = (CAPICOM_ENCODING_TYPE)lEncodingType;
+    
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
 
-    sig_obj *pSigner =
-        (sig_obj *)zend_object_store_get_object(zSigner TSRMLS_CC);
-    hash_dat_obj *pHashedData =
-        (hash_dat_obj *)zend_object_store_get_object(zHashedData TSRMLS_CC);
+    zobj = Z_OBJ_P(zSigner);
+    signer_obj *pSigner =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zobj = Z_OBJ_P(zHashedData);
+    hashed_data_obj *pHashedData =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
+
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->SignHash(
         pSigner->m_pCppCadesImpl, pHashedData->m_pCppCadesImpl, CadesType,
         EncodingType, &bVal));
@@ -84,7 +94,7 @@
     sVal = (char *)ecalloc(lVal, sizeof(char));
     memcpy(sVal, bVal.pbData(), lVal);
 
-    RETURN_STRINGL(sVal, lVal, 0)
+    RETURN_STRINGL(sVal, lVal);
 }
 
 PHP_METHOD(CPSignedData, CoSignHash) {
@@ -99,8 +109,8 @@
     char *sVal;
     int lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "OOll", &zSigner,
-                              sig_ce, &zHashedData, hash_dat_class_entry,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "OOll", &zSigner,
+                              signer_ce, &zHashedData, hashed_data_ce,
                               &lCadesType, &lEncodingType) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -107,13 +117,18 @@
     CadesType = (CADESCOM_CADES_TYPE)lCadesType;
     EncodingType = (CAPICOM_ENCODING_TYPE)lEncodingType;
 
-    sig_obj *pSigner =
-        (sig_obj *)zend_object_store_get_object(zSigner TSRMLS_CC);
-    hash_dat_obj *pHashedData =
-        (hash_dat_obj *)zend_object_store_get_object(zHashedData TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zobj = Z_OBJ_P(zSigner);
+    signer_obj *pSigner =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
+
+    zobj = Z_OBJ_P(zHashedData);
+    hashed_data_obj *pHashedData =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->CoSignHash(
         pSigner->m_pCppCadesImpl, pHashedData->m_pCppCadesImpl, CadesType,
         EncodingType, &bVal));
@@ -122,7 +137,7 @@
     sVal = (char *)ecalloc(lVal, sizeof(char));
     memcpy(sVal, bVal.pbData(), lVal);
 
-    RETURN_STRINGL(sVal, lVal, 0)
+    RETURN_STRINGL(sVal, lVal);
 }
 
 PHP_METHOD(CPSignedData, Sign) {
@@ -136,18 +151,21 @@
     char *sVal;
     int lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "Oll", &zSigner,
-                              sig_ce, &lDetached, &lEncodingType) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "Oll", &zSigner,
+                              signer_ce, &lDetached, &lEncodingType) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Detached = (BOOL)lDetached;
     EncodingType = (CAPICOM_ENCODING_TYPE)lEncodingType;
 
-    sig_obj *pSigner =
-        (sig_obj *)zend_object_store_get_object(zSigner TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zobj = Z_OBJ_P(zSigner);
+    signer_obj *pSigner =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Sign(
         pSigner->m_pCppCadesImpl, Detached, EncodingType, &bVal));
 
@@ -155,7 +173,7 @@
     sVal = (char *)ecalloc(lVal, sizeof(char));
     memcpy(sVal, bVal.pbData(), lVal);
 
-    RETURN_STRINGL(sVal, lVal, 0)
+    RETURN_STRINGL(sVal, lVal);
 }
 
 PHP_METHOD(CPSignedData, CoSign) {
@@ -167,17 +185,20 @@
     char *sVal;
     int lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "Ol", &zSigner, sig_ce,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "Ol", &zSigner, signer_ce,
                               &lEncodingType) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     EncodingType = (CAPICOM_ENCODING_TYPE)lEncodingType;
 
-    sig_obj *pSigner =
-        (sig_obj *)zend_object_store_get_object(zSigner TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zobj = Z_OBJ_P(zSigner);
+    signer_obj *pSigner =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->CoSign(pSigner->m_pCppCadesImpl,
                                                       EncodingType, &bVal));
 
@@ -185,7 +206,7 @@
     sVal = (char *)ecalloc(lVal, sizeof(char));
     memcpy(sVal, bVal.pbData(), lVal);
 
-    RETURN_STRINGL(sVal, lVal, 0)
+    RETURN_STRINGL(sVal, lVal);
 }
 
 PHP_METHOD(CPSignedData, CoSignCades) {
@@ -199,18 +220,21 @@
     char *sVal;
     int lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "Oll", &zSigner,
-                              sig_ce, &lCadesType, &lEncodingType) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "Oll", &zSigner,
+                              signer_ce, &lCadesType, &lEncodingType) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     CadesType = (CADESCOM_CADES_TYPE)lCadesType;
     EncodingType = (CAPICOM_ENCODING_TYPE)lEncodingType;
 
-    sig_obj *pSigner =
-        (sig_obj *)zend_object_store_get_object(zSigner TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zobj = Z_OBJ_P(zSigner);
+    signer_obj *pSigner =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->CoSignCades(
         pSigner->m_pCppCadesImpl, CadesType, EncodingType, &bVal));
 
@@ -218,7 +242,7 @@
     sVal = (char *)ecalloc(lVal, sizeof(char));
     memcpy(sVal, bVal.pbData(), lVal);
 
-    RETURN_STRINGL(sVal, lVal, 0)
+    RETURN_STRINGL(sVal, lVal);
 }
 
 PHP_METHOD(CPSignedData, EnhanceCades) {
@@ -225,7 +249,7 @@
     long lCadesType;
     CADESCOM_CADES_TYPE CadesType;
     char *TSAAddress;
-    int AddressLen;
+    size_t AddressLen;
     long lEncodingType;
     CAPICOM_ENCODING_TYPE EncodingType;
     CryptoPro::CBlob bVal;
@@ -233,7 +257,7 @@
     char *sVal;
     int lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "lsl", &lCadesType,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "lsl", &lCadesType,
                               &TSAAddress, &AddressLen,
                               &lEncodingType) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
@@ -241,8 +265,9 @@
     CadesType = (CADESCOM_CADES_TYPE)lCadesType;
     EncodingType = (CAPICOM_ENCODING_TYPE)lEncodingType;
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->EnhanceCades(
         CadesType, CAtlString(TSAAddress), EncodingType, &bVal));
 
@@ -250,19 +275,19 @@
     sVal = (char *)ecalloc(lVal, sizeof(char));
     memcpy(sVal, bVal.pbData(), lVal);
 
-    RETURN_STRINGL(sVal, lVal, 0)
+    RETURN_STRINGL(sVal, lVal);
 }
 
 PHP_METHOD(CPSignedData, Verify) {
     CryptoPro::CBlob bSignedMessage;
     unsigned char *sSignedMessage;
-    int lSignedMessage;
+    size_t lSignedMessage;
     long lDetached;
     BOOL Detached;
     long lVerifyFlag;
     CAPICOM_SIGNED_DATA_VERIFY_FLAG VerifyFlag;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "sll", &sSignedMessage,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "sll", &sSignedMessage,
                               &lSignedMessage, &lDetached,
                               &lVerifyFlag) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
@@ -272,8 +297,9 @@
 
     bSignedMessage.assign(sSignedMessage, lSignedMessage);
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->Verify(bSignedMessage, Detached, VerifyFlag));
 }
@@ -281,13 +307,13 @@
 PHP_METHOD(CPSignedData, VerifyCades) {
     CryptoPro::CBlob bSignedMessage;
     unsigned char *sSignedMessage;
-    int lSignedMessage;
+    size_t lSignedMessage;
     long lCadesType = CADESCOM_CADES_DEFAULT;
     CADESCOM_CADES_TYPE CadesType;
     long lDetached = 0;
     BOOL Detached;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|ll",
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s|ll",
                               &sSignedMessage, &lSignedMessage, &lCadesType,
                               &lDetached) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
@@ -297,8 +323,9 @@
 
     bSignedMessage.assign(sSignedMessage, lSignedMessage);
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->VerifyCades(bSignedMessage, CadesType, Detached));
 }
@@ -307,12 +334,12 @@
     CryptoPro::CBlob bSignedMessage;
     zval *zHashedData;
     unsigned char *sSignedMessage;
-    int lSignedMessage;
+    size_t lSignedMessage;
     long lCadesType = CADESCOM_CADES_DEFAULT;
     CADESCOM_CADES_TYPE CadesType;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "Os|l", &zHashedData,
-                              hash_dat_class_entry, &sSignedMessage,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "Os|l", &zHashedData,
+                              hashed_data_ce, &sSignedMessage,
                               &lSignedMessage, &lCadesType) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -320,11 +347,13 @@
 
     bSignedMessage.assign(sSignedMessage, lSignedMessage);
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
 
-    hash_dat_obj *pHashedData =
-        (hash_dat_obj *)zend_object_store_get_object(zHashedData TSRMLS_CC);
+    zobj = Z_OBJ_P(zHashedData);
+    hashed_data_obj *pHashedData =
+        (hashed_data_obj *)((char *)zobj - XtOffsetOf(hashed_data_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->VerifyHash(
         pHashedData->m_pCppCadesImpl, bSignedMessage, CadesType));
@@ -334,14 +363,15 @@
     long lType;
     CADESCOM_CONTENT_ENCODING_TYPE Type;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lType) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lType) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Type = (CADESCOM_CONTENT_ENCODING_TYPE)lType;
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_ContentEncoding(Type));
 }
 
@@ -348,23 +378,25 @@
 PHP_METHOD(CPSignedData, get_ContentEncoding) {
     CADESCOM_CONTENT_ENCODING_TYPE type;
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_ContentEncoding(&type));
 
-    RETURN_LONG(type)
+    RETURN_LONG(type);
 }
 
 PHP_METHOD(CPSignedData, set_Content) {
     char *sVal;
-    int lVal;
+    size_t lVal;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &sVal, &lVal) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &sVal, &lVal) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Content(sVal, lVal));
 }
 
@@ -373,8 +405,9 @@
     char *sVal;
     int lVal;
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Content(Val));
 
     lVal = Val.GetLength();
@@ -381,16 +414,18 @@
     sVal = (char *)ecalloc(lVal, sizeof(char));
     memcpy(sVal, Val, lVal);
 
-    RETURN_STRINGL(sVal, lVal, 0)
+    RETURN_STRINGL(sVal, lVal);
 }
 
 PHP_METHOD(CPSignedData, get_Signers) {
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
+
     object_init_ex(return_value, signers_ce);
+    zobj = Z_OBJ_P(return_value);
     signers_obj *pSigners =
-        (signers_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
-
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (signers_obj *)((char *)zobj - XtOffsetOf(signers_obj, zobj));
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_Signers(pSigners->m_pCppCadesImpl));
 
@@ -400,80 +435,152 @@
 PHP_METHOD(CPSignedData, get_Certificates) {
     boost::shared_ptr<CPPCadesCPCertificatesObject> pVal;
 
-    sig_dat_obj *obj =
-        (sig_dat_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_data_obj *obj =
+        (signed_data_obj *)((char *)zobj - XtOffsetOf(signed_data_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Certificates(pVal));
 
     object_init_ex(return_value, certs_ce);
+    zobj = Z_OBJ_P(return_value);
     certs_obj *pCertificates =
-        (certs_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (certs_obj *)((char *)zobj - XtOffsetOf(certs_obj, zobj));
     pCertificates->m_pCppCadesImpl = pVal;
 }
 
-zend_class_entry *sig_dat_class_entry;
-zend_object_handlers sig_dat_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-zend_function_entry sig_dat_methods[] = {
-    PHP_ME(CPSignedData, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPSignedData, SignCades, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, SignHash, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, Sign, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, CoSign, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, CoSignCades, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, CoSignHash, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, EnhanceCades, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, VerifyCades, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, VerifyHash, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, Verify, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, set_ContentEncoding, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, get_ContentEncoding, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, set_Content, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, get_Content, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, get_Signers, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedData, get_Certificates, NULL, ZEND_ACC_PUBLIC){NULL, NULL,
-                                                                  NULL}};
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_signcades, 0, 0, 4)
+ ZEND_ARG_INFO(0, signer)
+ ZEND_ARG_INFO(0, cadestype)
+ ZEND_ARG_INFO(0, detached)
+ ZEND_ARG_INFO(0, encodingtype)
+ZEND_END_ARG_INFO()
 
-void sig_dat_free_storage(void *object TSRMLS_DC) {
-    sig_dat_obj *obj = (sig_dat_obj *)object;
-    delete obj->m_pCppCadesImpl;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_signhash, 0, 0, 4)
+ ZEND_ARG_INFO(0, hasheddata)
+ ZEND_ARG_INFO(0, signer)
+ ZEND_ARG_INFO(0, cadestype)
+ ZEND_ARG_INFO(0, encodingtype)
+ZEND_END_ARG_INFO()
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_sign, 0, 0, 3)
+ ZEND_ARG_INFO(0, signer)
+ ZEND_ARG_INFO(0, detached)
+ ZEND_ARG_INFO(0, encodingtype)
+ZEND_END_ARG_INFO()
 
-    efree(obj);
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_cosign, 0, 0, 2)
+ ZEND_ARG_INFO(0, signer)
+ ZEND_ARG_INFO(0, encodingtype)
+ZEND_END_ARG_INFO()
 
-zend_object_value sig_dat_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_cosigncades, 0, 0, 3)
+ ZEND_ARG_INFO(0, signer)
+ ZEND_ARG_INFO(0, cadestype)
+ ZEND_ARG_INFO(0, encodingtype)
+ZEND_END_ARG_INFO()
 
-    sig_dat_obj *obj = (sig_dat_obj *)emalloc(sizeof(sig_dat_obj));
-    memset(obj, 0, sizeof(sig_dat_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_cosignhash, 0, 0, 4)
+ ZEND_ARG_INFO(0, signer)
+ ZEND_ARG_INFO(0, hasheddata)
+ ZEND_ARG_INFO(0, cadestype)
+ ZEND_ARG_INFO(0, encodingtype)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_enhancecades, 0, 0, 3)
+ ZEND_ARG_INFO(0, cadestype)
+ ZEND_ARG_INFO(0, tsaaddress)
+ ZEND_ARG_INFO(0, encodingtype)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, sig_dat_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &sig_dat_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_verifycades, 0, 0, 1)
+ ZEND_ARG_INFO(0, message)
+ ZEND_ARG_INFO(0, cadestype)
+ ZEND_ARG_INFO(0, detached)
+ZEND_END_ARG_INFO()
 
-    return retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_verifyhash, 0, 0, 2)
+ ZEND_ARG_INFO(0, hasheddata)
+ ZEND_ARG_INFO(0, message)
+ ZEND_ARG_INFO(0, cadestype)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_verify, 0, 0, 3)
+ ZEND_ARG_INFO(0, message)
+ ZEND_ARG_INFO(0, detached)
+ ZEND_ARG_INFO(0, verifyflag)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_set_contentencoding, 0, 0, 1)
+ ZEND_ARG_INFO(0, contentencoding)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_get_contentencoding, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_set_content, 0, 0, 1)
+ ZEND_ARG_INFO(0, content)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_get_content, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_get_signers, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_get_certificates, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+zend_class_entry *signed_data_ce;
+zend_object_handlers signed_data_obj_handlers;
+
+zend_function_entry signed_data_methods[] = {
+    PHP_ME(CPSignedData, __construct, arginfo_cpsigneddata_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPSignedData, SignCades, arginfo_cpsigneddata_signcades, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, SignHash, arginfo_cpsigneddata_signhash, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, Sign, arginfo_cpsigneddata_sign, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, CoSign, arginfo_cpsigneddata_cosign, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, CoSignCades, arginfo_cpsigneddata_cosigncades, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, CoSignHash, arginfo_cpsigneddata_cosignhash, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, EnhanceCades, arginfo_cpsigneddata_enhancecades, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, VerifyCades, arginfo_cpsigneddata_verifycades, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, VerifyHash, arginfo_cpsigneddata_verifyhash, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, Verify, arginfo_cpsigneddata_verify, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, set_ContentEncoding, arginfo_cpsigneddata_set_contentencoding, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, get_ContentEncoding, arginfo_cpsigneddata_get_contentencoding, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, set_Content, arginfo_cpsigneddata_set_content, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, get_Content, arginfo_cpsigneddata_get_content, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, get_Signers, arginfo_cpsigneddata_get_signers, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedData, get_Certificates, arginfo_cpsigneddata_get_certificates, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
+
+static void signed_data_free(zend_object *object ) {
+    signed_data_obj *obj = (signed_data_obj *)((char *)object - XtOffsetOf(signed_data_obj, zobj));
+    delete(obj->m_pCppCadesImpl);
+
+    zend_object_std_dtor(object);
 }
 
-void sig_dat_init(TSRMLS_D) {
+static zend_object* signed_data_create_handler(zend_class_entry *ce ) {
+    signed_data_obj *obj = (signed_data_obj *)emalloc(sizeof(signed_data_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(signed_data_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &signed_data_obj_handlers;
+
+    return &obj->zobj;
+}
+
+void signed_data_init(void) {
     zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce, "CPSignedData", sig_dat_methods);
-    sig_dat_class_entry = zend_register_internal_class(&ce TSRMLS_CC);
-    sig_dat_class_entry->create_object = sig_dat_create_handler;
-    memcpy(&sig_dat_handlers, zend_get_std_object_handlers(),
+    INIT_CLASS_ENTRY(ce, "CPSignedData", signed_data_methods);
+    signed_data_ce = zend_register_internal_class(&ce );
+    signed_data_ce->create_object = signed_data_create_handler;
+    memcpy(&signed_data_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    sig_dat_handlers.clone_obj = NULL;
+    signed_data_obj_handlers.clone_obj = NULL;
+    signed_data_obj_handlers.free_obj = signed_data_free;
+    signed_data_obj_handlers.offset = XtOffsetOf(signed_data_obj, zobj);
 }
Index: PHPCadesCPSignedData.h
===================================================================
--- PHPCadesCPSignedData.h	(revision 251535)
+++ PHPCadesCPSignedData.h	(working copy)
@@ -5,19 +5,19 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct sig_dat_obj {
-    zend_object zo;
+typedef struct _signed_data_obj {
     CryptoPro::PKI::CAdES::CPPCadesSignedDataObject *m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} signed_data_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
-extern zend_class_entry *sig_dat_class_entry;
-extern zend_object_handlers sig_dat_handlers;
+extern zend_class_entry *signed_data_ce;
+extern zend_object_handlers signed_data_obj_handlers;
 
-void sig_dat_free_storage(void *object TSRMLS_DC);
-zend_object_value sig_dat_create_handler(zend_class_entry *type TSRMLS_DC);
+// void signed_data_free_storage(void *object );
+// zend_object_value signed_data_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void sig_dat_init(TSRMLS_D);
+void signed_data_init(void);
 #endif
Index: PHPCadesCPSignedXML.cpp
===================================================================
--- PHPCadesCPSignedXML.cpp	(revision 251535)
+++ PHPCadesCPSignedXML.cpp	(working copy)
@@ -5,8 +5,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPSignedXML, __construct) {
-    sig_xml_obj *obj =
-        (sig_xml_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_xml_obj *obj =
+        (signed_xml_obj *)((char *)zobj - XtOffsetOf(signed_xml_obj, zobj));
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesSignedXMLObject>(
         new CPPCadesSignedXMLObject());
 }
@@ -13,14 +14,15 @@
 
 PHP_METHOD(CPSignedXML, set_Content) {
     char *str;
-    int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    sig_xml_obj *obj =
-        (sig_xml_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_xml_obj *obj =
+        (signed_xml_obj *)((char *)zobj - XtOffsetOf(signed_xml_obj, zobj));
     CStringBlob content(str);
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Content(content));
@@ -29,8 +31,9 @@
 PHP_METHOD(CPSignedXML, get_Content) {
     CStringBlob content;
 
-    sig_xml_obj *obj =
-        (sig_xml_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_xml_obj *obj =
+        (signed_xml_obj *)((char *)zobj - XtOffsetOf(signed_xml_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Content(content));
 
     RETURN_ATL_STRING_A(content)
@@ -40,14 +43,15 @@
     CADESCOM_XML_SIGNATURE_TYPE type;
     long ltype;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &ltype) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &ltype) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     type = (CADESCOM_XML_SIGNATURE_TYPE)ltype;
 
-    sig_xml_obj *obj =
-        (sig_xml_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_xml_obj *obj =
+        (signed_xml_obj *)((char *)zobj - XtOffsetOf(signed_xml_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_SignatureType(type));
 }
@@ -54,14 +58,15 @@
 
 PHP_METHOD(CPSignedXML, set_DigestMethod) {
     char *str;
-    int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    sig_xml_obj *obj =
-        (sig_xml_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_xml_obj *obj =
+        (signed_xml_obj *)((char *)zobj - XtOffsetOf(signed_xml_obj, zobj));
     CStringBlob method(str);
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_DigestMethod(method));
@@ -69,14 +74,15 @@
 
 PHP_METHOD(CPSignedXML, set_SignatureMethod) {
     char *str;
-    int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    sig_xml_obj *obj =
-        (sig_xml_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_xml_obj *obj =
+        (signed_xml_obj *)((char *)zobj - XtOffsetOf(signed_xml_obj, zobj));
     CStringBlob method(str);
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_SignatureMethod(method));
@@ -83,12 +89,14 @@
 }
 
 PHP_METHOD(CPSignedXML, get_Signers) {
-    sig_xml_obj *obj =
-        (sig_xml_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_xml_obj *obj =
+        (signed_xml_obj *)((char *)zobj - XtOffsetOf(signed_xml_obj, zobj));
 
     object_init_ex(return_value, signers_ce);
+    zobj = Z_OBJ_P(return_value);
     signers_obj *pSigners =
-        (signers_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (signers_obj *)((char *)zobj - XtOffsetOf(signers_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_Signers(pSigners->m_pCppCadesImpl));
@@ -95,23 +103,25 @@
 }
 
 PHP_METHOD(CPSignedXML, Sign) {
-    zval *zsigner;
+    zval *zsigned_xml;
     CStringBlob sign;
     char *data_str;
-    int data_len = 0;
+    size_t data_len = 0;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "Os", &zsigner, sig_ce,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "Os", &zsigned_xml, signer_ce,
                               &data_str, &data_len) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    sig_xml_obj *obj =
-        (sig_xml_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
-    sig_obj *signer =
-        (sig_obj *)zend_object_store_get_object(zsigner TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_xml_obj *obj =
+        (signed_xml_obj *)((char *)zobj - XtOffsetOf(signed_xml_obj, zobj));
+    zobj = Z_OBJ_P(zsigned_xml);
+    signer_obj *signed_xml =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
     CStringBlob path(data_str);
 
     HR_ERRORCHECK_RETURN(
-        obj->m_pCppCadesImpl->Sign(signer->m_pCppCadesImpl, path, sign));
+        obj->m_pCppCadesImpl->Sign(signed_xml->m_pCppCadesImpl, path, sign));
 
     RETURN_ATL_STRING_A(sign)
 }
@@ -118,75 +128,98 @@
 
 PHP_METHOD(CPSignedXML, Verify) {
     char *str_mes, *str_path;
-    int len_mes, len_path;
+    size_t len_mes, len_path;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ss", &str_mes,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "ss", &str_mes,
                               &len_mes, &str_path, &len_path) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     CStringBlob mes(str_mes, len_mes);
     CStringBlob path(str_path, len_path);
-    sig_xml_obj *obj =
-        (sig_xml_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signed_xml_obj *obj =
+        (signed_xml_obj *)((char *)zobj - XtOffsetOf(signed_xml_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Verify(mes, path));
 }
 
-zend_object_handlers sig_xml_obj_handlers;
-zend_class_entry *sig_xml_ce;
+zend_object_handlers signed_xml_obj_handlers;
+zend_class_entry *signed_xml_ce;
 
-void sig_xml_free_storage(void *object TSRMLS_DC) {
-    sig_xml_obj *obj = (sig_xml_obj *)object;
+static void signed_xml_free(zend_object *object ) {
+    signed_xml_obj *obj = (signed_xml_obj *)((char *)object - XtOffsetOf(signed_xml_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* signed_xml_create_handler(zend_class_entry *ce ) {
+    signed_xml_obj *obj = (signed_xml_obj *)emalloc(sizeof(signed_xml_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(signed_xml_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &signed_xml_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value sig_xml_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsignedxml_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    sig_xml_obj *obj = (sig_xml_obj *)emalloc(sizeof(sig_xml_obj));
-    memset(obj, 0, sizeof(sig_xml_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsignedxml_set_content, 0, 0, 1)
+ ZEND_ARG_INFO(0, content)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
-    retval.handle =
-        zend_objects_store_put(obj, NULL, sig_xml_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &sig_xml_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsignedxml_get_content, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsignedxml_set_signaturetype, 0, 0, 1)
+ ZEND_ARG_INFO(0, type)
+ZEND_END_ARG_INFO()
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsignedxml_set_digestmethod, 0, 0, 1)
+ ZEND_ARG_INFO(0, digestmethod)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsignedxml_set_signaturemethod, 0, 0, 1)
+ ZEND_ARG_INFO(0, signaturemethod)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsignedxml_get_signers, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsignedxml_sign, 0, 0, 2)
+ ZEND_ARG_INFO(0, signer)
+ ZEND_ARG_INFO(0, data)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsignedxml_verify, 0, 0, 2)
+ ZEND_ARG_INFO(0, message)
+ ZEND_ARG_INFO(0, xpath)
+ZEND_END_ARG_INFO()
+
 //связывание методов класса в function entry
-zend_function_entry sig_xml_methods[] = {
-    PHP_ME(CPSignedXML, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPSignedXML, set_Content, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedXML, get_Content, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedXML, set_SignatureType, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedXML, set_DigestMethod, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedXML, set_SignatureMethod, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedXML, get_Signers, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedXML, Sign, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSignedXML, Verify, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+zend_function_entry signed_xml_methods[] = {
+    PHP_ME(CPSignedXML, __construct, arginfo_cpsignedxml_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPSignedXML, set_Content, arginfo_cpsignedxml_set_content, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedXML, get_Content, arginfo_cpsignedxml_get_content, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedXML, set_SignatureType, arginfo_cpsignedxml_set_signaturetype, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedXML, set_DigestMethod, arginfo_cpsignedxml_set_digestmethod, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedXML, set_SignatureMethod, arginfo_cpsignedxml_set_signaturemethod, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedXML, get_Signers, arginfo_cpsignedxml_get_signers, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedXML, Sign, arginfo_cpsignedxml_sign, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSignedXML, Verify, arginfo_cpsignedxml_verify, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void sig_xml_init(TSRMLS_D) {
+void signed_xml_init(void) {
     zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce, "CPSignedXML", sig_xml_methods);
-    sig_xml_ce = zend_register_internal_class(&ce TSRMLS_CC);
-    sig_xml_ce->create_object = sig_xml_create_handler;
-    memcpy(&sig_xml_obj_handlers, zend_get_std_object_handlers(),
+    INIT_CLASS_ENTRY(ce, "CPSignedXML", signed_xml_methods);
+    signed_xml_ce = zend_register_internal_class(&ce );
+    signed_xml_ce->create_object = signed_xml_create_handler;
+    memcpy(&signed_xml_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    sig_xml_obj_handlers.clone_obj = NULL;
+    signed_xml_obj_handlers.clone_obj = NULL;
+    signed_xml_obj_handlers.free_obj = signed_xml_free;
+    signed_xml_obj_handlers.offset = XtOffsetOf(signed_xml_obj, zobj);
 }
Index: PHPCadesCPSignedXML.h
===================================================================
--- PHPCadesCPSignedXML.h	(revision 251535)
+++ PHPCadesCPSignedXML.h	(working copy)
@@ -5,20 +5,20 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct sig_xml_obj {
-    zend_object zo;
+typedef struct _signed_xml_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesSignedXMLObject> m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} signed_xml_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
-extern zend_object_handlers sig_xml_obj_handlers;
-extern zend_class_entry *sig_xml_ce;
+extern zend_object_handlers signed_xml_obj_handlers;
+extern zend_class_entry *signed_xml_ce;
 
-void sig_xml_free_storage(void *object TSRMLS_DC);
-zend_object_value sig_xml_create_handler(zend_class_entry *type TSRMLS_DC);
+// void signed_xml_free_storage(void *object );
+// zend_object_value signed_xml_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void sig_xml_init(TSRMLS_D);
+void signed_xml_init(void);
 
 #endif
Index: PHPCadesCPSigner.cpp
===================================================================
--- PHPCadesCPSigner.cpp	(revision 251535)
+++ PHPCadesCPSigner.cpp	(working copy)
@@ -5,9 +5,11 @@
 #include "PHPCadesCPAttributes.h"
 using namespace CryptoPro::PKI::CAdES;
 
-//Методы
+//РњРµС‚РѕРґС‹
 PHP_METHOD(CPSigner, __construct) {
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
     boost::shared_ptr<CPPCadesCPSignerObject> ptr(new CPPCadesCPSignerObject());
     obj->m_pCppCadesImpl = ptr;
 }
@@ -14,13 +16,16 @@
 
 PHP_METHOD(CPSigner, get_Certificate) {
     boost::shared_ptr<CPPCadesCPCertificateObject> ctxt;
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Certificate(ctxt));
 
     object_init_ex(return_value, cert_ce);
-    cert_obj *cobj =
-        (cert_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+    zobj = Z_OBJ_P(return_value);
+    certificate_obj *cobj =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
     cobj->m_pCppCadesImpl = ctxt;
 }
 
@@ -28,12 +33,15 @@
     zval *cert;
     CCertContext ctxt;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "O", &cert, cert_ce) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "O", &cert, cert_ce) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
-    cert_obj *cobj = (cert_obj *)zend_object_store_get_object(cert TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
+    zobj = Z_OBJ_P(cert);
+    certificate_obj *cobj = (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     HR_ERRORCHECK_RETURN(cobj->m_pCppCadesImpl->get_CertContext(ctxt));
     boost::shared_ptr<CPPCadesCPCertificateObject> pCert(
@@ -45,10 +53,12 @@
 PHP_METHOD(CPSigner, get_Options) {
     CAPICOM_CERTIFICATE_INCLUDE_OPTION opt;
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Options(&opt));
 
-    RETURN_LONG(opt)
+    RETURN_LONG(opt);
 }
 
 PHP_METHOD(CPSigner, set_Options) {
@@ -55,22 +65,27 @@
     long lOpt;
     CAPICOM_CERTIFICATE_INCLUDE_OPTION Opt;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &lOpt) == FAILURE)
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &lOpt) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     Opt = (CAPICOM_CERTIFICATE_INCLUDE_OPTION)lOpt;
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_Options(Opt));
 }
 
 PHP_METHOD(CPSigner, get_AuthenticatedAttributes) {
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
 
-    object_init_ex(return_value, attr_col_ce);
-    attr_col *aobj =
-        (attr_col *)zend_object_store_get_object(return_value TSRMLS_CC);
-    aobj->type = attr_ce;
+    object_init_ex(return_value, attributes_col_ce);
+    zobj = Z_OBJ_P(return_value);
+    attributes_col_obj *aobj =
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
+    aobj->type = attribute_ce;
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_AuthenticatedAttributes(
         aobj->m_pCppCadesImpl));
@@ -77,12 +92,15 @@
 }
 
 PHP_METHOD(CPSigner, get_UnauthenticatedAttributes) {
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
 
-    object_init_ex(return_value, attr_col_ce);
-    attr_col *aobj =
-        (attr_col *)zend_object_store_get_object(return_value TSRMLS_CC);
-    aobj->type = attr_ce;
+    object_init_ex(return_value, attributes_col_ce);
+    zobj = Z_OBJ_P(return_value);
+    attributes_col_obj *aobj =
+        (attributes_col_obj *)((char *)zobj - XtOffsetOf(attributes_col_obj, zobj));
+    aobj->type = attribute_ce;
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_UnauthenticatedAttributes(
         aobj->m_pCppCadesImpl));
@@ -91,7 +109,9 @@
 PHP_METHOD(CPSigner, get_TSAAddress) {
     CAtlString adrs;
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_TSAAddress(adrs));
 
@@ -100,13 +120,15 @@
 
 PHP_METHOD(CPSigner, set_TSAAddress) {
     char *str;
-    int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_TSAAddress(CAtlString(str)));
 }
@@ -118,7 +140,9 @@
     boost::shared_ptr<CryptoPro::CBlob> pBlob;
     boost::shared_ptr<CPPCadesCPBlobsObject> ptr;
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_CRLs(ptr));
 
     HR_ERRORCHECK_RETURN(ptr->get_Count(&count));
@@ -129,7 +153,7 @@
         len = pBlob->cbData();
         str = (char *)ecalloc(len, sizeof(char));
         memcpy(str, pBlob->pbData(), len);
-        add_next_index_stringl(return_value, str, len, 0);
+        add_next_index_stringl(return_value, str, len);
         str = NULL;
     }
 }
@@ -141,7 +165,9 @@
     boost::shared_ptr<CryptoPro::CBlob> pBlob;
     boost::shared_ptr<CPPCadesCPBlobsObject> ptr;
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_OCSPResponses(ptr));
 
     HR_ERRORCHECK_RETURN(ptr->get_Count(&count));
@@ -152,7 +178,7 @@
         len = pBlob->cbData();
         str = (char *)ecalloc(len, sizeof(char));
         memcpy(str, pBlob->pbData(), len);
-        add_next_index_stringl(return_value, str, len, 0);
+        add_next_index_stringl(return_value, str, len);
         str = NULL;
     }
 }
@@ -161,7 +187,9 @@
     CryptoPro::CDateTime time;
     CryptoPro::CStringProxy strpr;
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_SigningTime(time));
 
@@ -173,7 +201,9 @@
     CryptoPro::CDateTime time;
     CryptoPro::CStringProxy strpr;
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_SignatureTimeStampTime(time));
@@ -184,78 +214,112 @@
 
 PHP_METHOD(CPSigner, set_KeyPin) {
     char *str;
-    int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
-    sig_obj *obj = (sig_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+    zend_object *zobj = Z_OBJ_P(getThis());
+    signer_obj *obj =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
     CAtlStringA pin(CA2CA(CAtlStringA(str), CP_UTF8));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_KeyPin(pin));
 }
 
-//Вспомогательные функции обертки
-zend_object_handlers sig_obj_handlers;
-zend_class_entry *sig_ce;
+//Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ С„СѓРЅРєС†РёРё РѕР±РµСЂС‚РєРё
+zend_object_handlers signer_obj_handlers;
+zend_class_entry *signer_ce;
 
-void sig_free_storage(void *object TSRMLS_DC) {
-    sig_obj *obj = (sig_obj *)object;
+static void signer_free(zend_object *object) {
+    signer_obj *obj = (signer_obj *)((char *)object - XtOffsetOf(signer_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* signer_create_handler(zend_class_entry *ce ) {
+    signer_obj *obj = (signer_obj *)emalloc(sizeof(signer_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(signer_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &signer_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value sig_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    sig_obj *obj = (sig_obj *)emalloc(sizeof(sig_obj));
-    memset(obj, 0, sizeof(sig_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_get_certificate, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_set_certificate, 0, 0, 1)
+ ZEND_ARG_INFO(0, certificate)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, sig_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &sig_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_get_options, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_set_options, 0, 0, 1)
+ ZEND_ARG_INFO(0, options)
+ZEND_END_ARG_INFO()
 
-zend_function_entry sig_methods[] = {
-    PHP_ME(CPSigner, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPSigner, get_Certificate, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, set_Certificate, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, get_Options, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, set_Options, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, get_AuthenticatedAttributes, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, get_UnauthenticatedAttributes, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, get_TSAAddress, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, set_TSAAddress, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, get_CRLs, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, get_OCSPResponses, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, get_SigningTime, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, get_SignatureTimeStampTime, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigner, set_KeyPin, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_get_authenticatedattributes, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-void sig_init(TSRMLS_D) {
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_get_unauthenticatedattributes, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_get_tsaaddress, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_set_tsaaddress, 0, 0, 1)
+ ZEND_ARG_INFO(0, tsaaddress)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_get_crls, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_get_ocspresponses, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_get_signingtime, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigner_get_signaturetimestamptime, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigneddata_set_keypin, 0, 0, 1)
+ ZEND_ARG_INFO(0, pin)
+ZEND_END_ARG_INFO()
+
+zend_function_entry CPSigner_methods[] = {
+    PHP_ME(CPSigner, __construct, arginfo_cpsigner_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPSigner, get_Certificate, arginfo_cpsigner_get_certificate, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, set_Certificate, arginfo_cpsigner_set_certificate, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, get_Options, arginfo_cpsigner_get_options, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, set_Options, arginfo_cpsigner_set_options, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, get_AuthenticatedAttributes, arginfo_cpsigner_get_authenticatedattributes, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, get_UnauthenticatedAttributes, arginfo_cpsigner_get_unauthenticatedattributes, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, get_TSAAddress, arginfo_cpsigner_get_tsaaddress, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, set_TSAAddress, arginfo_cpsigner_set_tsaaddress, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, get_CRLs, arginfo_cpsigner_get_crls, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, get_OCSPResponses, arginfo_cpsigner_get_ocspresponses, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, get_SigningTime, arginfo_cpsigner_get_signingtime, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, get_SignatureTimeStampTime, arginfo_cpsigner_get_signaturetimestamptime, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigner, set_KeyPin, arginfo_cpsigneddata_set_keypin, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
+
+void sig_init(void) {
     zend_class_entry ce;
-    INIT_CLASS_ENTRY(ce, "CPSigner", sig_methods);
-    sig_ce = zend_register_internal_class(&ce TSRMLS_CC);
-    sig_ce->create_object = sig_create_handler;
-    memcpy(&sig_obj_handlers, zend_get_std_object_handlers(),
+    INIT_CLASS_ENTRY(ce, "CPSigner", CPSigner_methods);
+    signer_ce = zend_register_internal_class(&ce );
+    signer_ce->create_object = signer_create_handler;
+    memcpy(&signer_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
-    sig_obj_handlers.clone_obj = NULL;
+    signer_obj_handlers.clone_obj = NULL;
+    signer_obj_handlers.free_obj = signer_free;
+    signer_obj_handlers.offset = XtOffsetOf(signer_obj, zobj);
 }
Index: PHPCadesCPSigner.h
===================================================================
--- PHPCadesCPSigner.h	(revision 251535)
+++ PHPCadesCPSigner.h	(working copy)
@@ -3,17 +3,17 @@
 
 #include "CPPCadesCPSigner.h"
 
-struct sig_obj {
-    zend_object zo;
+typedef struct _signer_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPSignerObject> m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} signer_obj;
 
-extern zend_object_handlers sig_obj_handlers;
-extern zend_class_entry *sig_ce;
+extern zend_object_handlers signer_obj_handlers;
+extern zend_class_entry *signer_ce;
 
-void sig_free_storage(void *object TSRMLS_DC);
-zend_object_value sig_create_handler(zend_class_entry *type TSRMLS_DC);
+// void sig_free_storage(void *object );
+// zend_object* sig_create_handler(zend_class_entry *type );
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void sig_init(TSRMLS_D);
+void sig_init(void);
 #endif
Index: PHPCadesCPSigners.cpp
===================================================================
--- PHPCadesCPSigners.cpp	(revision 251535)
+++ PHPCadesCPSigners.cpp	(working copy)
@@ -6,80 +6,75 @@
 PHP_METHOD(CPSigners, get_Count) {
     unsigned int value;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     signers_obj *obj =
-        (signers_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (signers_obj *)((char *)zobj - XtOffsetOf(signers_obj, zobj));
 
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Count(&value));
 
-    RETURN_LONG(value)
+    RETURN_LONG(value);
 }
 
 PHP_METHOD(CPSigners, get_Item) {
     long index;
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &index) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "l", &index) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
     boost::shared_ptr<CPPCadesCPSignerObject> pVal;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     signers_obj *obj =
-        (signers_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (signers_obj *)((char *)zobj - XtOffsetOf(signers_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Item(index, pVal));
 
-    object_init_ex(return_value, sig_ce);
-    sig_obj *Signer =
-        (sig_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+    object_init_ex(return_value, signer_ce);
+    zobj = Z_OBJ_P(return_value);
+    signer_obj *Signer =
+        (signer_obj *)((char *)zobj - XtOffsetOf(signer_obj, zobj));
     Signer->m_pCppCadesImpl = pVal;
 }
 
-void signers_free_storage(void *object TSRMLS_DC) {
-    signers_obj *obj = (signers_obj *)object;
+static void signers_free(zend_object* object) {
+    signers_obj *obj = (signers_obj *)((char *)object - XtOffsetOf(signers_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
-
-    efree(obj);
+    zend_object_std_dtor(object);
 }
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigners_get_count, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsigners_get_item, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
 zend_class_entry *signers_ce;
 zend_object_handlers signers_obj_handlers;
 
 zend_function_entry CPSigners_methods[] = {
-    PHP_ME(CPSigners, get_Count, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPSigners, get_Item, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPSigners, get_Count, arginfo_cpsigners_get_count, ZEND_ACC_PUBLIC)
+    PHP_ME(CPSigners, get_Item, arginfo_cpsigners_get_item, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-zend_object_value signers_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+static zend_object* signers_create_handler(zend_class_entry *ce ) {
+    signers_obj *obj = (signers_obj *)emalloc(sizeof(signers_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(signers_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &signers_obj_handlers;
 
-    signers_obj *obj = (signers_obj *)emalloc(sizeof(signers_obj));
-    memset(obj, 0, sizeof(signers_obj));
-
-    obj->zo.ce = type;
-
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
-    retval.handle =
-        zend_objects_store_put(obj, NULL, signers_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &signers_obj_handlers;
-
-    return retval;
+    return &obj->zobj;
 }
 
-void signers_init(TSRMLS_D) {
+void signers_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPSigners", CPSigners_methods);
-    signers_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    signers_ce = zend_register_internal_class(&ce );
     signers_ce->create_object = signers_create_handler;
     memcpy(&signers_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     signers_obj_handlers.clone_obj = NULL;
+    signers_obj_handlers.free_obj = signers_free;
+    signers_obj_handlers.offset = XtOffsetOf(signers_obj, zobj);
 }
Index: PHPCadesCPSigners.h
===================================================================
--- PHPCadesCPSigners.h	(revision 251535)
+++ PHPCadesCPSigners.h	(working copy)
@@ -5,20 +5,20 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct signers_obj {
-    zend_object zo;
+typedef struct _signers_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPSignersObject> m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} signers_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_class_entry *signers_ce;
 extern zend_object_handlers signers_obj_handlers;
 
-void signers_free_storage(void *object TSRMLS_DC);
-zend_object_value signers_create_handler(zend_class_entry *type TSRMLS_DC);
+// void signers_free_storage(void *object );
+// zend_object* signers_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void signers_init(TSRMLS_D);
+void signers_init(void);
 
 #endif
Index: PHPCadesCPStore.cpp
===================================================================
--- PHPCadesCPStore.cpp	(revision 251535)
+++ PHPCadesCPStore.cpp	(working copy)
@@ -7,8 +7,9 @@
 using namespace CryptoPro::PKI::CAdES;
 
 PHP_METHOD(CPStore, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     store_obj *obj =
-        (store_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (store_obj *)((char *)zobj - XtOffsetOf(store_obj, zobj));
     obj->m_pCppCadesImpl =
         boost::shared_ptr<CPPCadesCPStoreObject>(new CPPCadesCPStoreObject());
 }
@@ -20,10 +21,10 @@
     long lLocation;
     long lMode;
     CADESCOM_STORE_LOCATION Location;
-    int len;
+    size_t len;
     CAPICOM_STORE_OPEN_MODE Mode;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "lsl", &lLocation,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "lsl", &lLocation,
                               &name, &len, &lMode) == FAILURE) {
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
     }
@@ -34,24 +35,28 @@
     wname = (wchar_t *)ecalloc(len + 1, sizeof(wchar_t));
     mbstowcs(wname, name, len);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     store_obj *obj =
-        (store_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (store_obj *)((char *)zobj - XtOffsetOf(store_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Open(Location, wname, Mode));
 }
 
 PHP_METHOD(CPStore, Close) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     store_obj *obj =
-        (store_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (store_obj *)((char *)zobj - XtOffsetOf(store_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->Close());
 }
 
 PHP_METHOD(CPStore, get_Certificates) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     store_obj *obj =
-        (store_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (store_obj *)((char *)zobj - XtOffsetOf(store_obj, zobj));
 
     object_init_ex(return_value, certs_ce);
+    zobj = Z_OBJ_P(return_value);
     certs_obj *cobj =
-        (certs_obj *)zend_object_store_get_object(return_value TSRMLS_CC);
+        (certs_obj *)((char *)zobj - XtOffsetOf(certs_obj, zobj));
 
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->get_Certificates(cobj->m_pCppCadesImpl));
@@ -58,78 +63,87 @@
 }
 
 PHP_METHOD(CPStore, get_Location) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     store_obj *obj =
-        (store_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (store_obj *)((char *)zobj - XtOffsetOf(store_obj, zobj));
 
     CADESCOM_STORE_LOCATION this_loc;
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Location(&this_loc));
 
-    RETURN_LONG(this_loc)
+    RETURN_LONG(this_loc);
 }
 
 PHP_METHOD(CPStore, get_Name) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     store_obj *obj =
-        (store_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (store_obj *)((char *)zobj - XtOffsetOf(store_obj, zobj));
 
     CAtlString wname;
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_Name(wname));
 
-    RETURN_ATL_STRING(wname)
+    RETURN_ATL_STRING(wname);
 }
 
 zend_object_handlers store_obj_handlers;
 zend_class_entry *store_ce;
 
-void store_free_storage(void *object TSRMLS_DC) {
-    store_obj *obj = (store_obj *)object;
+static void store_free(zend_object *object ) {
+    store_obj *obj = (store_obj *)((char *)object - XtOffsetOf(store_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* store_create_handler(zend_class_entry *ce ) {
+    store_obj *obj = (store_obj *)emalloc(sizeof(store_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(store_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &store_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value store_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpstore_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    store_obj *obj = (store_obj *)emalloc(sizeof(store_obj));
-    memset(obj, 0, sizeof(store_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpstore_open, 0, 0, 3)
+ ZEND_ARG_INFO(0, location)
+ ZEND_ARG_INFO(0, name)
+ ZEND_ARG_INFO(0, mode)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpstore_close, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, store_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &store_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpstore_get_certificates, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpstore_get_location, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-//связывание методов класса в function entry
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpstore_get_name, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+//СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry store_methods[] = {
-    PHP_ME(CPStore, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(CPStore, Open, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPStore, Close, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPStore, get_Certificates, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPStore, get_Location, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(CPStore, get_Name, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(CPStore, __construct, arginfo_cpstore_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(CPStore, Open, arginfo_cpstore_open, ZEND_ACC_PUBLIC)
+    PHP_ME(CPStore, Close, arginfo_cpstore_close, ZEND_ACC_PUBLIC)
+    PHP_ME(CPStore, get_Certificates, arginfo_cpstore_get_certificates, ZEND_ACC_PUBLIC)
+    PHP_ME(CPStore, get_Location, arginfo_cpstore_get_location, ZEND_ACC_PUBLIC)
+    PHP_ME(CPStore, get_Name, arginfo_cpstore_get_name, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void store_init(TSRMLS_D) {
+void store_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "CPStore", store_methods);
-    store_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    store_ce = zend_register_internal_class(&ce );
     store_ce->create_object = store_create_handler;
     memcpy(&store_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     store_obj_handlers.clone_obj = NULL;
+    store_obj_handlers.free_obj = store_free;
+    store_obj_handlers.offset = XtOffsetOf(store_obj, zobj);
 }
Index: PHPCadesCPStore.h
===================================================================
--- PHPCadesCPStore.h	(revision 251535)
+++ PHPCadesCPStore.h	(working copy)
@@ -4,25 +4,25 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct store_obj {
-    zend_object zo;
+typedef struct _store_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPStoreObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} store_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers store_obj_handlers;
 extern zend_class_entry *store_ce;
 
-//функция освобождения памяти. используется при уничтожении объектов
-void store_free_storage(void *object TSRMLS_DC);
+// //функция освобождения памяти. используется при уничтожении объектов
+// void store_free_storage(void *object );
 
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value store_create_handler(zend_class_entry *type TSRMLS_DC);
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value store_create_handler(zend_class_entry *type );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void store_init(TSRMLS_D);
+void store_init(void);
 
 #endif
Index: PHPCadesSymmetricAlgorithm.cpp
===================================================================
--- PHPCadesSymmetricAlgorithm.cpp	(revision 251535)
+++ PHPCadesSymmetricAlgorithm.cpp	(working copy)
@@ -6,9 +6,10 @@
 using namespace CryptoPro;
 
 PHP_METHOD(SymmetricAlgorithm, __construct) {
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
+
     obj->m_pCppCadesImpl = boost::shared_ptr<CPPCadesSymmetricAlgorithmObject>(
         new CPPCadesSymmetricAlgorithmObject());
 }
@@ -16,29 +17,31 @@
 PHP_METHOD(SymmetricAlgorithm, get_DiversData) {
     CBlob value;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
 
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_DiversData(value));
 
     char *ret_str = (char *)ecalloc(value.cbData(), sizeof(char));
     strncpy(ret_str, (const char *)value.pbData(), value.cbData());
-    RETURN_STRINGL(ret_str, value.cbData(), 0)
+    RETURN_STRINGL(ret_str, value.cbData());
 }
 
 PHP_METHOD(SymmetricAlgorithm, set_DiversData) {
     char *str;
-    unsigned int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
 
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_DiversData(str, len));
 }
 
@@ -45,28 +48,30 @@
 PHP_METHOD(SymmetricAlgorithm, get_IV) {
     CBlob value;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_IV(value));
 
     char *ret_str = (char *)ecalloc(value.cbData(), sizeof(char));
     strncpy(ret_str, (const char *)value.pbData(), value.cbData());
-    RETURN_STRINGL(ret_str, value.cbData(), 0)
+    RETURN_STRINGL(ret_str, value.cbData());
 }
 
 PHP_METHOD(SymmetricAlgorithm, set_IV) {
     char *str;
-    unsigned int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &str, &len) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s", &str, &len) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
 
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->put_IV(str, len));
 }
 
@@ -73,34 +78,36 @@
 PHP_METHOD(SymmetricAlgorithm, Encrypt) {
     long isFinal = 1;
     char *str;
-    int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "sl", &str, &len,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "sl", &str, &len,
                               &isFinal) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
+
     CStringProxy retval;
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->Encrypt(str, len, isFinal, retval));
 
-    RETURN_PROXY_STRING(retval)
+    RETURN_PROXY_STRING(retval);
 }
 
 PHP_METHOD(SymmetricAlgorithm, Decrypt) {
     long isFinal = 1;
     char *str;
-    int len;
+    size_t len;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|l", &str, &len,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "s|l", &str, &len,
                               &isFinal) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
+
     CBlob value;
     HR_ERRORCHECK_RETURN(
         obj->m_pCppCadesImpl->Decrypt(str, len, isFinal, value));
@@ -107,21 +114,22 @@
 
     char *ret_str = (char *)ecalloc(value.cbData(), sizeof(char));
     strncpy(ret_str, (const char *)value.pbData(), value.cbData());
-    RETURN_STRINGL(ret_str, value.cbData(), 0)
+    RETURN_STRINGL(ret_str, value.cbData());
 }
 
 PHP_METHOD(SymmetricAlgorithm, DiversifyKey) {
     boost::shared_ptr<CPPCadesSymmetricAlgorithmObject> pVal;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->DiversifyKey(pVal));
 
     object_init_ex(return_value, symmetric_algorithm_ce);
+    zobj = Z_OBJ_P(return_value);
     symmetric_algorithm_obj *psym_algo_obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(
-            return_value TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
     psym_algo_obj->m_pCppCadesImpl = pVal;
 }
 
@@ -128,7 +136,7 @@
 PHP_METHOD(SymmetricAlgorithm, GenerateKey) {
     long lAlgo = -1;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|l", &lAlgo) ==
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "|l", &lAlgo) ==
         FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
@@ -137,9 +145,10 @@
     if (lAlgo != -1)
         algorithm = (CADESCOM_ENCRYPTION_ALGORITHM)lAlgo;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->GenerateKey(algorithm));
 }
 
@@ -146,15 +155,17 @@
 PHP_METHOD(SymmetricAlgorithm, ExportKey) {
     zval *z_recipient;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "O", &z_recipient,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "O", &z_recipient,
                               cert_ce) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
-    cert_obj *pCert =
-        (cert_obj *)zend_object_store_get_object(z_recipient TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
+    
+    zobj = Z_OBJ_P(z_recipient);   
+    certificate_obj *pCert =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
 
     CBlob value;
     HR_ERRORCHECK_RETURN(
@@ -162,27 +173,29 @@
 
     char *ret_str = (char *)ecalloc(value.cbData(), sizeof(char));
     strncpy(ret_str, (const char *)value.pbData(), value.cbData());
-    RETURN_STRINGL(ret_str, value.cbData(), 0)
+    RETURN_STRINGL(ret_str, value.cbData());
 }
 
 PHP_METHOD(SymmetricAlgorithm, ImportKey) {
     zval *z_recipient;
     char *data_str;
-    long ldata_str = 0;
+    size_t ldata_str = 0;
     char *pin_str;
-    long lpin_str = 0;
+    size_t lpin_str = 0;
 
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "sO|s", &data_str,
+    if (zend_parse_parameters(ZEND_NUM_ARGS() , "sO|s", &data_str,
                               &ldata_str, &z_recipient, cert_ce, &pin_str,
                               &lpin_str) == FAILURE)
         RETURN_WITH_EXCEPTION(E_INVALIDARG);
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)zend_object_store_get_object(getThis()
-                                                                TSRMLS_CC);
-    cert_obj *pCert =
-        (cert_obj *)zend_object_store_get_object(z_recipient TSRMLS_CC);
+        (symmetric_algorithm_obj *)((char *)zobj - XtOffsetOf(symmetric_algorithm_obj, zobj));
 
+    zobj = Z_OBJ_P(z_recipient);   
+    certificate_obj *pCert =
+        (certificate_obj *)((char *)zobj - XtOffsetOf(certificate_obj, zobj));
+
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->ImportKey(
         data_str, ldata_str, pCert->m_pCppCadesImpl, pin_str, lpin_str));
 }
@@ -190,65 +203,92 @@
 zend_object_handlers symmetric_algorithm_obj_handlers;
 zend_class_entry *symmetric_algorithm_ce;
 
-void symmetric_algorithm_free_storage(void *object TSRMLS_DC) {
-    symmetric_algorithm_obj *obj = (symmetric_algorithm_obj *)object;
+static void symmetric_algorithm_free(zend_object *object ) {
+    symmetric_algorithm_obj *obj = (symmetric_algorithm_obj *)((char *)object - XtOffsetOf(symmetric_algorithm_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object);
+}
 
-    efree(obj);
+static zend_object* symmetric_algorithm_create_handler(zend_class_entry *ce
+                                                         ) {
+    symmetric_algorithm_obj *obj = (symmetric_algorithm_obj *)emalloc(sizeof(symmetric_algorithm_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(symmetric_algorithm_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce);
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &symmetric_algorithm_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value symmetric_algorithm_create_handler(zend_class_entry *type
-                                                         TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    symmetric_algorithm_obj *obj =
-        (symmetric_algorithm_obj *)emalloc(sizeof(symmetric_algorithm_obj));
-    memset(obj, 0, sizeof(symmetric_algorithm_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_get_diversdata, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_set_diversdata, 0, 0, 1)
+ ZEND_ARG_INFO(0, data)
+ZEND_END_ARG_INFO()
 
-    retval.handle = zend_objects_store_put(
-        obj, NULL, symmetric_algorithm_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &symmetric_algorithm_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_get_iv, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_set_iv, 0, 0, 1)
+ ZEND_ARG_INFO(0, iv)
+ZEND_END_ARG_INFO()
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_encrypt, 0, 0, 2)
+ ZEND_ARG_INFO(0, data)
+ ZEND_ARG_INFO(0, isfinal)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_decrypt, 0, 0, 1)
+ ZEND_ARG_INFO(0, message)
+ ZEND_ARG_INFO(0, isfinal)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_generatekey, 0, 0, 0)
+ ZEND_ARG_INFO(0, algorithm)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_diversifykey, 0, 0, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_importkey, 0, 0, 2)
+ ZEND_ARG_INFO(0, data)
+ ZEND_ARG_INFO(0, certificate)
+ ZEND_ARG_INFO(0, pin)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_cpsymmetricalgorithm_exportkey, 0, 0, 1)
+ ZEND_ARG_INFO(0, certificate)
+ZEND_END_ARG_INFO()
+
 //связывание методов класса в function entry
 zend_function_entry symmetric_algorithm_methods[] = {
-    PHP_ME(SymmetricAlgorithm, __construct, NULL,
-           ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(SymmetricAlgorithm, get_DiversData, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(SymmetricAlgorithm, set_DiversData, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(SymmetricAlgorithm, get_IV, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(SymmetricAlgorithm, set_IV, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(SymmetricAlgorithm, Encrypt, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(SymmetricAlgorithm, Decrypt, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(SymmetricAlgorithm, GenerateKey, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(SymmetricAlgorithm, DiversifyKey, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(SymmetricAlgorithm, ImportKey, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(SymmetricAlgorithm, ExportKey, NULL, ZEND_ACC_PUBLIC){NULL, NULL,
-                                                                 NULL}};
+    PHP_ME(SymmetricAlgorithm, __construct, arginfo_cpsymmetricalgorithm_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(SymmetricAlgorithm, get_DiversData, arginfo_cpsymmetricalgorithm_get_diversdata, ZEND_ACC_PUBLIC)
+    PHP_ME(SymmetricAlgorithm, set_DiversData, arginfo_cpsymmetricalgorithm_set_diversdata, ZEND_ACC_PUBLIC)
+    PHP_ME(SymmetricAlgorithm, get_IV, arginfo_cpsymmetricalgorithm_get_iv, ZEND_ACC_PUBLIC)
+    PHP_ME(SymmetricAlgorithm, set_IV, arginfo_cpsymmetricalgorithm_set_iv, ZEND_ACC_PUBLIC)
+    PHP_ME(SymmetricAlgorithm, Encrypt, arginfo_cpsymmetricalgorithm_encrypt, ZEND_ACC_PUBLIC)
+    PHP_ME(SymmetricAlgorithm, Decrypt, arginfo_cpsymmetricalgorithm_decrypt, ZEND_ACC_PUBLIC)
+    PHP_ME(SymmetricAlgorithm, GenerateKey, arginfo_cpsymmetricalgorithm_generatekey, ZEND_ACC_PUBLIC)
+    PHP_ME(SymmetricAlgorithm, DiversifyKey, arginfo_cpsymmetricalgorithm_diversifykey, ZEND_ACC_PUBLIC)
+    PHP_ME(SymmetricAlgorithm, ImportKey, arginfo_cpsymmetricalgorithm_importkey, ZEND_ACC_PUBLIC)
+    PHP_ME(SymmetricAlgorithm, ExportKey, arginfo_cpsymmetricalgorithm_exportkey, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void symmetric_algorithm_init(TSRMLS_D) {
+void symmetric_algorithm_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "SymmetricAlgorithm", symmetric_algorithm_methods);
-    symmetric_algorithm_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    symmetric_algorithm_ce = zend_register_internal_class(&ce );
     symmetric_algorithm_ce->create_object = symmetric_algorithm_create_handler;
     memcpy(&symmetric_algorithm_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     symmetric_algorithm_obj_handlers.clone_obj = NULL;
+    symmetric_algorithm_obj_handlers.free_obj = symmetric_algorithm_free;
+    symmetric_algorithm_obj_handlers.offset = XtOffsetOf(symmetric_algorithm_obj, zobj);
 }
Index: PHPCadesSymmetricAlgorithm.h
===================================================================
--- PHPCadesSymmetricAlgorithm.h	(revision 251535)
+++ PHPCadesSymmetricAlgorithm.h	(working copy)
@@ -5,11 +5,11 @@
 
 //объявление структуры, которая свяжет объект оборачиваемого класса
 //с объектом php
-struct symmetric_algorithm_obj {
-    zend_object zo;
+typedef struct _symmetric_algorithm_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesSymmetricAlgorithmObject>
         m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} symmetric_algorithm_obj;
 
 //хэндлеры для обработки объектов оборачиваемого класса
 extern zend_object_handlers symmetric_algorithm_obj_handlers;
@@ -16,13 +16,13 @@
 extern zend_class_entry *symmetric_algorithm_ce;
 
 //функция освобождения памяти. используется при уничтожении объектов
-void symmetric_algorithm_free_storage(void *object TSRMLS_DC);
-//функция создания хэндлера для нового объекта класса. используется при
-//создании новых объектов
-zend_object_value symmetric_algorithm_create_handler(zend_class_entry *type
-                                                         TSRMLS_DC);
+// void symmetric_algorithm_free_storage(void *object );
+// //функция создания хэндлера для нового объекта класса. используется при
+// //создании новых объектов
+// zend_object_value symmetric_algorithm_create_handler(zend_class_entry *type
+//                                                          );
 
 //функция инициализации класса. должна включаться в
 //функцию, инициализации модуля
-void symmetric_algorithm_init(TSRMLS_D);
+void symmetric_algorithm_init(void);
 #endif
Index: PHPCadesVersion.cpp
===================================================================
--- PHPCadesVersion.cpp	(revision 251535)
+++ PHPCadesVersion.cpp	(working copy)
@@ -6,8 +6,10 @@
 
 //РњРµС‚РѕРґС‹
 PHP_METHOD(Version, __construct) {
+
+    zend_object *zobj = Z_OBJ_P(getThis());
     version_obj *obj =
-        (version_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (version_obj *)((char *)zobj - XtOffsetOf(version_obj, zobj));
     obj->m_pCppCadesImpl =
         boost::shared_ptr<CPPVersionObject>(new CPPVersionObject());
 }
@@ -14,8 +16,10 @@
 
 PHP_METHOD(Version, get_MajorVersion) {
     unsigned int version;
+
+    zend_object *zobj = Z_OBJ_P(getThis());
     version_obj *obj =
-        (version_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (version_obj *)((char *)zobj - XtOffsetOf(version_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_MajorVersion(&version));
 
     RETURN_LONG(version);
@@ -24,8 +28,9 @@
 PHP_METHOD(Version, get_MinorVersion) {
     unsigned int version;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     version_obj *obj =
-        (version_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (version_obj *)((char *)zobj - XtOffsetOf(version_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_MinorVersion(&version));
 
     RETURN_LONG(version);
@@ -34,8 +39,9 @@
 PHP_METHOD(Version, get_BuildVersion) {
     unsigned int version;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     version_obj *obj =
-        (version_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (version_obj *)((char *)zobj - XtOffsetOf(version_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->get_BuildVersion(&version));
 
     RETURN_LONG(version);
@@ -44,8 +50,9 @@
 PHP_METHOD(Version, toString) {
     CAtlString AtlVersion;
 
+    zend_object *zobj = Z_OBJ_P(getThis());
     version_obj *obj =
-        (version_obj *)zend_object_store_get_object(getThis() TSRMLS_CC);
+        (version_obj *)((char *)zobj - XtOffsetOf(version_obj, zobj));
     HR_ERRORCHECK_RETURN(obj->m_pCppCadesImpl->toString(AtlVersion));
 
     RETURN_ATL_STRING(AtlVersion);
@@ -55,55 +62,56 @@
 zend_object_handlers version_obj_handlers;
 zend_class_entry *version_ce;
 
-void version_free_storage(void *object TSRMLS_DC) {
-    version_obj *obj = (version_obj *)object;
+static void version_free(zend_object* object) {
+    version_obj *obj = (version_obj *)((char *)object - XtOffsetOf(version_obj, zobj));
     obj->m_pCppCadesImpl.reset();
 
-    zend_hash_destroy(obj->zo.properties);
-    FREE_HASHTABLE(obj->zo.properties);
+    zend_object_std_dtor(object); /* call Zend's free handler, which will free object properties */
+}
 
-    efree(obj);
+static zend_object* version_create_handler(zend_class_entry *ce ) {
+    version_obj *obj = (version_obj *)emalloc(sizeof(version_obj) + zend_object_properties_size(ce));
+    memset(obj, 0, sizeof(version_obj) + zend_object_properties_size(ce));
+    
+    zend_object_std_init(&obj->zobj, ce); /* take care of the zend_object also ! */
+    object_properties_init(&obj->zobj, ce);
+    obj->zobj.handlers = &version_obj_handlers;
+
+    return &obj->zobj;
 }
 
-zend_object_value version_create_handler(zend_class_entry *type TSRMLS_DC) {
-    zend_object_value retval;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_version_construct, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    version_obj *obj = (version_obj *)emalloc(sizeof(version_obj));
-    memset(obj, 0, sizeof(version_obj));
-    obj->zo.ce = type;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_version_get_majorversion, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    ALLOC_HASHTABLE(obj->zo.properties);
-    zend_hash_init(obj->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-    zval *tmp;
-    zend_hash_copy(obj->zo.properties, &(type->default_properties),
-                   (copy_ctor_func_t)zval_add_ref, (void *)&tmp,
-                   sizeof(zval *));
-#else
-    object_properties_init(&obj->zo, type);
-#endif
+ZEND_BEGIN_ARG_INFO_EX(arginfo_version_get_minorversion, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    retval.handle =
-        zend_objects_store_put(obj, NULL, version_free_storage, NULL TSRMLS_CC);
-    retval.handlers = &version_obj_handlers;
+ZEND_BEGIN_ARG_INFO_EX(arginfo_version_get_buildversion, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
-    return retval;
-}
+ZEND_BEGIN_ARG_INFO_EX(arginfo_version_tostring, 0, 0, 0)
+ZEND_END_ARG_INFO()
 
 //СЃРІСЏР·С‹РІР°РЅРёРµ РјРµС‚РѕРґРѕРІ РєР»Р°СЃСЃР° РІ function entry
 zend_function_entry version_methods[] = {
-    PHP_ME(Version, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
-    PHP_ME(Version, get_MajorVersion, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(Version, get_MinorVersion, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(Version, get_BuildVersion, NULL, ZEND_ACC_PUBLIC)
-    PHP_ME(Version, toString, NULL, ZEND_ACC_PUBLIC){NULL, NULL, NULL}};
+    PHP_ME(Version, __construct, arginfo_version_construct, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
+    PHP_ME(Version, get_MajorVersion, arginfo_version_get_majorversion, ZEND_ACC_PUBLIC)
+    PHP_ME(Version, get_MinorVersion, arginfo_version_get_minorversion, ZEND_ACC_PUBLIC)
+    PHP_ME(Version, get_BuildVersion, arginfo_version_get_buildversion, ZEND_ACC_PUBLIC)
+    PHP_ME(Version, toString, arginfo_version_tostring, ZEND_ACC_PUBLIC)
+    {NULL, NULL, NULL}};
 
-void version_init(TSRMLS_D) {
+void version_init(void) {
     zend_class_entry ce;
     INIT_CLASS_ENTRY(ce, "Version", version_methods);
-    version_ce = zend_register_internal_class(&ce TSRMLS_CC);
+    version_ce = zend_register_internal_class(&ce );
     version_ce->create_object = version_create_handler;
     memcpy(&version_obj_handlers, zend_get_std_object_handlers(),
            sizeof(zend_object_handlers));
     version_obj_handlers.clone_obj = NULL;
+    version_obj_handlers.free_obj = version_free;
+    version_obj_handlers.offset = XtOffsetOf(version_obj, zobj); /* Here, we declare the offset to the engine */
 }
Index: PHPCadesVersion.h
===================================================================
--- PHPCadesVersion.h	(revision 251535)
+++ PHPCadesVersion.h	(working copy)
@@ -6,10 +6,10 @@
 
 //РѕР±СЉСЏРІР»РµРЅРёРµ СЃС‚СЂСѓРєС‚СѓСЂС‹, РєРѕС‚РѕСЂР°СЏ СЃРІСЏР¶РµС‚ РѕР±СЉРµРєС‚ РѕР±РѕСЂР°С‡РёРІР°РµРјРѕРіРѕ РєР»Р°СЃСЃР°
 //СЃ РѕР±СЉРµРєС‚РѕРј php
-struct version_obj {
-    zend_object zo;
+typedef struct _version_obj {
     boost::shared_ptr<CryptoPro::PKI::CAdES::CPPVersionObject> m_pCppCadesImpl;
-};
+    zend_object zobj; /* MUST be the last element */
+} version_obj;
 
 //С…СЌРЅРґР»РµСЂС‹ РґР»СЏ РѕР±СЂР°Р±РѕС‚РєРё РѕР±СЉРµРєС‚РѕРІ РѕР±РѕСЂР°С‡РёРІР°РµРјРѕРіРѕ РєР»Р°СЃСЃР°
 extern zend_object_handlers version_obj_handlers;
@@ -16,15 +16,15 @@
 
 extern zend_class_entry *version_ce;
 
-//С„СѓРЅРєС†РёСЏ РѕСЃРІРѕР±РѕР¶РґРµРЅРёСЏ РїР°РјСЏС‚Рё. РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РїСЂРё СѓРЅРёС‡С‚РѕР¶РµРЅРёРё РѕР±СЉРµРєС‚РѕРІ
-void version_free_storage(void *object TSRMLS_DC);
+// С„СѓРЅРєС†РёСЏ РѕСЃРІРѕР±РѕР¶РґРµРЅРёСЏ РїР°РјСЏС‚Рё. РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РїСЂРё СѓРЅРёС‡С‚РѕР¶РµРЅРёРё РѕР±СЉРµРєС‚РѕРІ
+// void version_free_storage(void *object );
 
 //С„СѓРЅРєС†РёСЏ СЃРѕР·РґР°РЅРёСЏ С…СЌРЅРґР»РµСЂР° РґР»СЏ РЅРѕРІРѕРіРѕ РѕР±СЉРµРєС‚Р° РєР»Р°СЃСЃР°. РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РїСЂРё
 //СЃРѕР·РґР°РЅРёРё РЅРѕРІС‹С… РѕР±СЉРµРєС‚РѕРІ
-zend_object_value version_create_handler(zend_class_entry *type TSRMLS_DC);
+//zend_object_value version_create_handler(zend_class_entry *type );
 
 //С„СѓРЅРєС†РёСЏ РёРЅРёС†РёР°Р»РёР·Р°С†РёРё РєР»Р°СЃСЃР°. РґРѕР»Р¶РЅР° РІРєР»СЋС‡Р°С‚СЊСЃСЏ РІ
 //С„СѓРЅРєС†РёСЋ, РёРЅРёС†РёР°Р»РёР·Р°С†РёРё РјРѕРґСѓР»СЏ
-void version_init(TSRMLS_D);
+void version_init(void);
 
 #endif
Index: stdafx.h
===================================================================
--- stdafx.h	(revision 251535)
+++ stdafx.h	(working copy)
@@ -16,9 +16,24 @@
 #define RETURN_ATL_STRINGL RETURN_ATL_STRINGL_W
 #endif
 
+/* C99 requires these for C++ to get the definitions
+ * of INT64_MAX and other macros used by Zend/zend_long.h
+ * C11 drops this requirement, so these effectively
+ * just backport that piece of behavior.
+ */
+#ifdef __cplusplus
+# ifndef __STDC_LIMIT_MACROS
+#  define __STDC_LIMIT_MACROS
+# endif
+# ifndef __STDC_CONSTANT_MACROS
+#  define __STDC_CONSTANT_MACROS
+# endif
+#endif
+
+
 #include <iostream>
-#include <memory> //Этот хедер тут нужен что бы компилить с новыми версиями libstdc++
-                  //в них есть конфликт с __in и __out макросами которые определены в MS хедерах.
+#include <memory> //Р­С‚РѕС‚ С…РµРґРµСЂ С‚СѓС‚ РЅСѓР¶РµРЅ С‡С‚Рѕ Р±С‹ РєРѕРјРїРёР»РёС‚СЊ СЃ РЅРѕРІС‹РјРё РІРµСЂСЃРёСЏРјРё libstdc++
+                  //РІ РЅРёС… РµСЃС‚СЊ РєРѕРЅС„Р»РёРєС‚ СЃ __in Рё __out РјР°РєСЂРѕСЃР°РјРё РєРѕС‚РѕСЂС‹Рµ РѕРїСЂРµРґРµР»РµРЅС‹ РІ MS С…РµРґРµСЂР°С….
 
 #ifdef UNIX
     #include "CSP_WinDef.h"
@@ -92,7 +107,7 @@
     str = (char *)ecalloc(len + 1, sizeof(char));\
     wcstombs(str, atlstr, len);\
     str[len] = '\0';\
-    RETURN_STRING(str, 0)\
+    RETURN_STRING(str);\
     }
 
 #define RETURN_ATL_STRINGL_W(atlstr)\
@@ -102,7 +117,7 @@
     len = atlstr.GetLength();\
     str = (char *)ecalloc(len, sizeof(char));\
     wcstombs(str, atlstr, len);\
-    RETURN_STRINGL(str, len, 0)\
+    RETURN_STRINGL(str, len);\
     }
 
 #define RETURN_ATL_STRING_A(atlstr)\
@@ -113,7 +128,7 @@
     str = (char *)ecalloc(len + 1, sizeof(char));\
     memcpy(str, atlstr, len);\
     str[len] = '\0';\
-    RETURN_STRING(str, 0)\
+    RETURN_STRING(str);\
     }
 
 #define RETURN_ATL_STRINGL_A(atlstr)\
@@ -123,7 +138,7 @@
     len = atlstr.GetLength();\
     str = (char *)ecalloc(len, sizeof(char));\
     memcpy(str, atlstr, len);\
-    RETURN_STRINGL(str, len, 0)\
+    RETURN_STRINGL(str, len);\
     }
 
 #define RETURN_PROXY_STRING(prstr)\
@@ -133,10 +148,10 @@
     len = strlen(prstr.c_str());\
     str = (char *)ecalloc(len + 1, sizeof(char));\
     strncpy(str, prstr.c_str(), len + 1);\
-    RETURN_STRING(str, 0)\
+    RETURN_STRING(str);\
     }
 
-#ifdef UNIX //разные макросы ибо на линуксе нет  _vscwprintf() который нужен внутри AppendFormat().
+#ifdef UNIX //СЂР°Р·РЅС‹Рµ РјР°РєСЂРѕСЃС‹ РёР±Рѕ РЅР° Р»РёРЅСѓРєСЃРµ РЅРµС‚  _vscwprintf() РєРѕС‚РѕСЂС‹Р№ РЅСѓР¶РµРЅ РІРЅСѓС‚СЂРё AppendFormat().
 
 #ifdef MAKELANGID
     #undef MAKELANGID
@@ -151,7 +166,7 @@
         wchar_t buff[14];                                               \
         swprintf(buff, 14, L" (0x%08X)", err);                          \
         message.Append(buff);                                           \
-        zend_throw_exception(zend_exception_get_default(TSRMLS_C), CW2A(message, CP_UTF8), err TSRMLS_CC);\
+        zend_throw_exception(zend_exception_get_default(), CW2A(message, CP_UTF8), err );\
         RETURN_FALSE;\
         } while (0)
 
@@ -161,7 +176,7 @@
         CAtlStringW message = GetErrorMessage(HRESULT_FROM_WIN32(err),	\
 	    MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US));              \
         message.AppendFormat(L" (0x%08X)", err);                        \
-        zend_throw_exception(zend_exception_get_default(TSRMLS_C), CW2A(message, CP_UTF8), err TSRMLS_CC);\
+        zend_throw_exception(zend_exception_get_default(), CW2A(message, CP_UTF8), err );\
         RETURN_FALSE;\
         } while (0)
 
